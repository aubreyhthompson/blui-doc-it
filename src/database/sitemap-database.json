{
    "": { "title": "Power Xpert Blue | Powering Teams to Make What Matters*" },
    "/overview": {
        "title": "What is PX Blue?",
        "text": "import { Divider, ImageGrid } from '../app/components';\nimport DesignSystemImage from '../app/assets/design-system.jpg';\n\n<!-- KEYWORDS: overview PX Blue design development introduction -->\n\n# Welcome to Power Xpert Blue\n\n<ImageGrid images={[DesignSystemImage]} regularWidth />\n\nPower Xpert Blue is a complete design system for web and mobile applications. This system will help your team build beautiful applications that adhere to our design guidelines while ensuring flexibility and code reusability.\n\n> Check out our [Release Notes](/release-notes) to see what's new in the latest version of PX Blue.\n\n## Design\n\nThe goal of the Power Xpert Blue design system is to ensure consistency between software products delivered by different teams. With a common aesthetic and common guidelines, we can be sure that all products feel like they belong to the same family.\n\nPower Xpert Blue is based on the [Material Design](https://material.io/) language. If you are working with our Studio Blue design team, their designs will follow this standard. If you are not utilizing Studio Blue, ensure that your designers are following the Material Guidelines as well as any additional PX Blue [design patterns](/patterns).\n\n## Development\n\nPower Xpert Blue is also a development platform. This platform is intended to help development teams work quickly and efficiently by providing recommendations for technologies, tools/libraries, approaches to common challenges, as well as re-usable components. We support a variety of technologies to give your team the flexibility to choose what will work best for you.\n\n-   To learn about the technologies we support, check out our [Web](/development/frameworks-web/intro) or [Mobile](/development/frameworks-mobile/intro) technology pages.\n-   To learn about the different resources provided by PX Blue, see our [Resources](/resources) page.\n\n<Divider />\n\n# About this site\n\nThis site will provide you with everything you need to get started with PX Blue:\n\n-   Information Guides, including information on starting a [New Project](/get-started/new-project) and the different types of applications you can build\n-   Development Guides, including how to set up a [Development Environment](/development/environment), how to start a new project in any of our supported technologies, and what tools to use for [Testing](/development/testing)\n-   [Design Guides](/design/intro) explaining how to use PX Blue as a designer\n-   Code Examples/[Design Patterns](/patterns) for how to build common elements of a PX Blue application\n-   An extensive set of [icons](/style/iconography), [colors](/style/color), and [typography](/style/typography) guidelines that you can use in your designs\n-   A [resources](/resources) page with links to all of the PX Blue [NPM packages](https://www.npmjs.com/org/pxblue) and [GitHub repositories](https://github.com/pxblue)\n-   A community section with information on [reporting bugs](/community/bugs), [requesting features](/community/features), and more.\n"
    },
    "/get-started/new-project": {
        "title": "Where to Begin?",
        "text": "import { Divider } from '../../app/components';\n\n<!-- KEYWORDS: web mobile new project compare comparison -->\n\n# New Project Guide\n\nWhen approaching a potential new project, it can be challenging to know where to start. As a first step, it's helpful to decide if this is going to be a web application, mobile application, or both. Here is a run-down of these different types of applications.\n\n## Web Applications\n\nThese applications are accessible over the web. They can be accessed from any device with a network connection and a web browser (personal computer, mobile phone). To learn more about what a web application entails, check out our [Web App](/get-started/web) guide.\n\n## Mobile Applications\n\nMobile applications are intended to be used strictly on mobile devices (e.g., cell phones, tablets, etc.). These can be downloaded directly to the device (e.g., from the App Store or Google Play) and do not have to be connected to the Internet to run. To learn more about what a mobile application entails, including the difference between native and hybrid apps, check out our [Mobile App](/get-started/mobile) guide.\n\n<Divider />\n\n# Deciding What Kind of Application to Build\n\nWith a new project, the nature of the project often determines which type of application you will need.\n\n## This Project is Replacing an Existing Product\n\nThink about the existing product and how it is used. Gather feedback from existing users and identify areas for improvement.\n\nIn general, you will want to at least provide the same type of application as before (unless user feedback suggests that it's not what they need). If you had a web application before, you may want to build a responsive web application this time. Alternatively, you may want to expand on the existing product by offering a mobile application.\n\n## This is a Brand New Product (never before seen)\n\nThink about how the product will be used. Does it offer features that users will want to access on the go? Is it going to be actively used in the field, or is it something users will more likely use from their desk?\n\nIn general, you can't go wrong with a web application. If you do your due diligence and design a properly responsive application, you will be able to access it from any connected device, including mobile. If you suspect that the primary mode of interacting with the application will be from a mobile device or if the application needs to work offline, you may want to consider building a dedicated mobile app.\n"
    },
    "/get-started/web": {
        "title": "Web Apps",
        "text": "<!-- KEYWORDS: web application introduction framework -->\n\n# Web Applications\n\nWeb applications are everywhere. As the name suggests, they can be accessed from any device that can access the Internet. This means they have a lot of flexibility, but that comes with extra responsibility when you design them.\n\n## Responsive Design\n\nResponsive web design is critical for web applications today. With a nearly infinite variety of web-capable devices available, you'll want your application to look great on all of them. It's much easier to design a responsive web application if you start with mobile designs first. If you can fit your features into a mobile-sized display, it's much easier to scale up to a desktop size than it is to design for desktop and then scale everything down to mobile.\n\n## Get Started With a Web App\n\nThere are a lot of wonderful web applications out there and tons of options for how to proceed. Most modern applications are built with HTML / CSS and sit inside a JavaScript framework. If your application needs to be very small, or if you don't really have a need for a JavaScript infrastructure, you can certainly build static applications with just HTML and CSS. You can also use \"vanilla\" JavaScript without the need for including an entire JavaScript framework in your application. We support both Angular and React in the PX Blue design system.\n\nFor a comparison of the pros / cons of each of these frameworks, see our [Framework Introduction](/development/frameworks-web/intro).\n\nOne of the goals of PX Blue is to maximize maintainability and code re-use by standardizing on certain technologies. If you want to use a different framework from those that we support, you'll need to consider the trade-offs.\n"
    },
    "/get-started/mobile": {
        "title": "Mobile Apps",
        "text": "import { Divider } from '../../app/components';\n\n<!-- KEYWORDS: mobile hybrid compare comparison native application -->\n\n# Mobile Applications\n\nMobile applications are very popular. They can be accessed anywhere you can take your mobile device, both online and offline, and can take greater advantage of device features and capabilities than a web application.\n\nMobile applications come in two primary varieties: native apps and hybrid apps.\n\n## Native mobile apps\n\n-   Must be built using the native code that runs on mobile devices. In general, that means Java (Android) or Swift / Objective C (iOS)\n-   Should adhere to the design and development guidelines for the intended platforms:\n    -   [iOS Guidelines](https://developer.apple.com/ios/human-interface-guidelines/overview/themes/)\n        <!-- markdown-link-check-disable -->\n    -   [Android Guidelines](https://developer.android.com/design/index.html)\n        <!-- markdown-link-check-enable -->\n\nAndroid and iOS are the dominant players in the mobile market, but you should check with your particular users to see what is most prevalent in your target market.\n\n## Hybrid mobile apps\n\n-   Maintained as a single code base that is deployed to multiple different device types (namely iOS and Android)\n-   Built using web-technologies (i.e. JavaScript)\n    -   low barrier to entry for web developers\n-   Implemented differently depending on the framework:\n    -   some compile down to native components\n    -   others render all content in a web view (essentially a web page running inside of an app)\n\n<Divider style={{}} />\n\n# Comparing the two approaches\n\n## Native mobile apps\n\n-   Guaranteed to look & feel like an app since it uses native components\n-   Requires more specialized development expertise\n-   Requires separate code bases for different operating systems\n    -   Longer development time\n    -   More expensive / more maintenance\n\n## Hybrid mobile apps\n\n-   Reduces development time thanks to shared code base\n-   Provides more technology options\n    -   Many different hybrid platforms / tools available\n-   Allows for a consistent look on different platforms\n-   Makes development easier by using web technologies, but it's also easier to make something that doesn't follow standard mobile patterns\n\n<Divider style={{}} />\n\n# So, which one should you use?\n\nOur recommendation for mobile applications is to take a hybrid approach. This will allow you to deploy multiple versions of your application (i.e. iOS and Android) from a single code base. We offer support for several different approaches to building hybrid apps (see our [Mobile Framework Introduction](/development/frameworks-mobile/intro) to learn about the technologies we support).\n\nIf you prefer to build a strictly native app and adhere to the PX Blue standards, there are ways of doing this using [Material Design Components for Android](https://material.io/develop/android/) and [Material Design Components for iOS](https://material.io/develop/ios/).\n\n> **NOTE:** PX Blue support for native mobile applications is limited - if you are planning to go this route, please [Contact us](/community/contactus).\n"
    },
    "/development/environment": {
        "title": "Environment Setup",
        "text": "import { Divider } from '../../app/components';\n\n<!-- KEYWORDS: developer develop environment guide tutorial -->\n\n# Setting up Your Development Environment\n\nGetting started is often the most frustrating part of application development. Fortunately, many of the modern JavaScript frameworks have made great strides in providing tools to get you up and running as quickly as possible. Below, we walk through the basics of getting your system set up to develop.\n\n## Integrated Development Environment (IDE)\n\nThere are a bunch of different IDEs on the market, and in general you should be able to use any of these that you like and are comfortable with. If you don't have a personal preference, we recommend trying [Visual Studio Code](https://code.visualstudio.com) - it is quite excellent and comes with a variety of tools to make your development experience seamless. And it's free!\n\n## Git\n\nChances are, you probably want to keep your application in source control. Git is one of the big players in this space (it's also the backbone for BitBucket).\n\nYou may already have git installed. To check, run:\n\n```sh\ngit --version\n```\n\nin a command prompt. If you don't have git installed, you can download it from the [Git Website](http://git-scm.com/downloads).\n\nIf you are behind a proxy, you'll also need to set up the git proxies as well:\n\n```sh\ngit config --global http.proxy http://url.to.your.proxy:port\ngit config --global https.proxy http://url.to.your.proxy:port\n```\n\nThe proxy addresses may vary depending on your location. Consult your local IT department if you’re not sure.\n\n## Node\n\nThe majority of JavaScript frameworks (and PX Blue resources) are available via the Node Package Manager (NPM). This package manager allows you to install a variety of third party tools, packages, and other dependencies that you need for your applications. To use NPM, you will need to install [NodeJS](https://nodejs.org/en/download/).\n\n## Yarn\n\nOur projects and example code are set up to be run using yarn, but if you prefer, you're welcome to use NPM in your projects instead. Instructions for installing yarn on various operating systems can be found on the [Yarn Website](https://yarnpkg.com/en/docs/install).\n\nTo check if you have yarn installed, run:\n\n```sh\nyarn -v\n```\n\nfrom a command prompt. If you are behind a proxy, you will also need to configure your proxy settings. It may be sufficient for you to set `HTTP_PROXY` and `HTTPS_PROXY` in your environment variables. However, you may need to also explicitly set proxy values for yarn:\n\n```sh\nyarn config set proxy http://url.to.your.proxy:port\nyarn config set https-proxy http://url.to.your.proxy:port\n```\n\nThe proxy addresses may vary depending on your location. Consult your local IT department if you’re not sure. Once you have configured the proxy, you should be able to install packages by using:\n\n```sh\nyarn add <package-name>\n```\n\n> If you are installing packages globally using yarn, you will need to ensure that your PATH variable has an entry pointing to your global yarn install directory. This location will vary based on your operating system.\n\n<Divider />\n\n# Hybrid App Development\n\nIf you are setting up for building a mobile app, there are some additional steps you will want to take to prepare. The following requirements are the basics. Depending on your selected [framework](/development/frameworks-mobile/intro), there will be other specific setup steps detailed in our Getting Started Guides.\n\n## Prerequisites\n\n### Hardware\n\nMobile development is resource-intensive, so you will need a development machine that is up to the task. Your machine should at least match the following minimum requirements:\n\n-   a Mac (if you plan on building or testing iOS locally)\n-   16GB RAM or more (running multiple emulators can easily push you over 20GB)\n-   Solid State Hard Drive (SSD)\n-   5/6 Gen Core i7 with Virtualization Technology or better\n\n### Software\n\nThere are a few software tools that you will need before you can get started:\n\n<!-- markdown-link-check-disable -->\n\n-   [Android Studio](https://developer.android.com/studio/) (required for building for Android)\n    <!-- markdown-link-check-enable -->\n-   [xCode](https://developer.apple.com/xcode/) (Mac-only, required for building for iOS)\n"
    },
    "/development/cli": {
        "title": "PX Blue CLI",
        "text": "import { Divider } from '../../app/components';\n\n<!-- KEYWORDS: cli command line interface new project start -->\n\n# PX Blue CLI\n\nThe PX Blue CLI (Command-Line Interface) is a tool for quickly starting a new project using PX Blue. It will automatically create a skeleton project in your chosen framework, add Material and PX Blue component library dependencies, include and integrate PX Blue themes, typography, and colors, and optionally add PX Blue code formatting and linting profiles.\n\nTo start a new project with the CLI:\n\n```sh\nnpx -p @pxblue/cli pxb new\n```\n\nFor more detailed information and usage instructions, check out the [@pxblue/cli](https://www.npmjs.com/package/@pxblue/cli) package on NPM.\n\n## Supported Frameworks\n\nThe PX Blue CLI works with all PX Blue supported frameworks: Angular, React, Ionic, and React Native. For React and React Native projects, you will have the option to create your project in TypeScript or JavaScript.\n"
    },
    "/development/frameworks-web/intro": {
        "title": "Introduction",
        "text": "import { Divider } from '../../../app/components';\n\n<!-- KEYWORDS: introduction web framework compare comparison -->\n\n# PX Blue Web Frameworks\n\nPower Xpert Blue supports web application development using Angular and React. Both are open source JavaScript frameworks with large communities of support and both have open source component libraries implementing Material Design. The two are quite comparable and you would not go wrong by choosing either, but there are some notable differences outlined below.\n\n## Angular (with Angular Material)\n\n-   A comprehensive framework, with a lot of built-in features and functionality\n-   Written in TypeScript (superset of JavaScript with strong variable typing)\n-   Structured way of organizing your entire application (if following the Angular CLI)\n-   May be more accessible to developers with greater back-end or full-stack experience\n-   Maintained by Google\n-   Learn more on the [Angular website](https://angular.io/)\n\n## React (with Material UI)\n\n-   A UI library for building custom Web Components / Applications\n-   Can be combined with additional libraries (e.g. Redux) to be a more comprehensive framework\n-   Virtual DOM allows for fewer re-renders (i.e., faster UI updates)\n-   May be more accessible to developers with greater experience with JavaScript and front-end development\n-   Maintained by Facebook\n-   Learn more on the [React website](https://reactjs.org/)\n\n<Divider style={{}} />\n\n# Which framework should I use?\n\nChoosing a framework is entirely up to you. They each have their own pros and cons, so you'll need to decide what is best for your application. In general, if you have developers who are very familiar with a particular framework, it might be worthwhile to use that framework to avoid any unnecessary learning curves associated with a new one. If you don't have development resources yet, you will probably want to conduct a more in-depth analysis of the available frameworks to decide what is most appropriate for your application. Feel free to reach out to us for assistance if needed.\n\nIf you choose to use one of these frameworks, have a look at our Guides for using them with PX Blue:\n\n-   [Angular Guide](/development/frameworks-web/angular)\n-   [React Guide](/development/frameworks-web/react)\n"
    },
    "/development/frameworks-web/angular": {
        "title": "Angular Guide",
        "text": "import { Divider } from '../../../app/components';\n\n<!-- KEYWORDS: angular web framework guide tutorial -->\n\n# Getting Started with Angular\n\nThe following instructions will guide you through starting a new PX Blue project using Angular. Alternatively, you can also start your project by downloading one of our code samples from [Github](https://github.com/pxblue) (the Login or Navigation examples are good projects to start from).\n\n## Using the PX Blue CLI\n\nThe fastest way to start a new PX Blue project is to use the [PX Blue CLI](/development/cli). The CLI will automatically create a starter project for you (using the [Angular CLI](http://cli.angular.io/)) with all of the necessary PX Blue dependencies pre-configured. To start an Angular project:\n\n```sh\nnpx -p @pxblue/cli pxb new angular\n```\n\nYou will be asked to provide a name for your project and whether or not you want to use the PX Blue eslint and prettier configurations files.\n\nThe PX Blue CLI will automatically include:\n\n-   Angular Material Component Library ([@angular/material](https://www.npmjs.com/package/@angular/material))\n-   PX Blue Component Library ([@pxblue/angular-components](https://www.npmjs.com/package/@pxblue/angular-components))\n-   PX Blue Themes ([@pxblue/angular-themes](https://www.npmjs.com/package/@pxblue/angular-themes))\n-   PX Blue Icons ([@pxblue/icons](https://www.npmjs.com/package/@pxblue/icons))\n-   PX Blue Colors ([@pxblue/colors](https://www.npmjs.com/package/@pxblue/colors))\n-   Open Sans web font ([typeface-open-sans](https://www.npmjs.com/package/typeface-open-sans))\n-   PX Blue ESLint and Prettier configurations, if selected ([@pxblue/eslint-config](https://www.npmjs.com/package/@pxblue/eslint-config) / [@pxblue/prettier-config](https://www.npmjs.com/package/@pxblue/prettier-config))\n-   IE 11 Support\n\nFor detailed usage instructions, refer to the [PX Blue CLI documentation](https://www.npmjs.com/package/@pxblue/cli).\n\n## Using an Existing Project\n\nIf you have an existing project and would like to integrate PX Blue, you can follow the manual integration instructions below. If you have not already started your project, we recommend that you scaffold your project with the PX Blue CLI.\n\n<Divider />\n\n# Manual PX Blue Integration\n\nBefore taking the following steps, you'll want to make sure that you have an existing application. If you used the PX Blue CLI to start your project, these steps have already been done for you automatically.\n\n## Including the Component Libraries\n\n### Angular Material\n\nAngular projects should make use of the [Angular Material](https://material.angular.io/) component library. Our PX Blue themes are designed to work with these components.\n\n```sh\nnpm install --save @angular/material\n// or\nyarn add @angular/material\n```\n\nFor detailed documentation about the various components available in Angular Material, as well as sample code and API reference, refer to the [Angular Material Documentation](https://material.angular.io/components/).\n\n### PX Blue Components\n\nAdditionally, we have a [supplemental library](https://github.com/pxblue/angular-component-library/tree/dev) of components designed specifically for PX Blue applications. If you wish to use these components, you can install them by running:\n\n```sh\nnpm install --save @pxblue/angular-components\n// or\nyarn add @pxblue/angular-components\n```\n\n## Adding PX Blue Themes\n\nBy default, your application will be themed with the Google Material theme. To use the [PX Blue theme](https://www.npmjs.com/package/@pxblue/angular-themes), first install it:\n\n```sh\nnpm install --save @pxblue/angular-themes\n// or\nyarn add @pxblue/angular-themes\n```\n\nInstalling the theme package will automatically include the Open Sans web font package as well as the PX Blue [colors](https://www.npmjs.com/package/@pxblue/colors) package. In order to use the PX Blue themes and font (Open Sans), you will need to modify your angular.json file \"styles\" entries (there is one under \"build\" and one under \"test\") to include the PX Blue themes and Open Sans reference:\n\n```json\n\"styles\": [\n    \"src/styles.scss\",\n    \"./node_modules/@pxblue/angular-themes/theme.scss\",\n    \"./node_modules/typeface-open-sans\"\n],\n```\n\n### Applying the Theme\n\nYou can apply the theme to your application by adding the proper class to your application's body element:\n\n```html\n// Default Theme\n<body class=\"pxb-blue\" />\n\n// Dark Theme\n<body class=\"pxb-blue-dark\" />\n```\n\n> If you do not specify a theme class, your application will use the default Material theme.\n\nYou can access the fonts using mat-typography, e.g.:\n\n```html\n<section class=\"mat-typography>\n   <h1>H1 Text</h1>\n   <h2>H2 Text</h2>\n   <p>Paragraph text</p>\n   <div class=\"body-2\">Bold body copy</div>\n</section>\n```\n\nYou can access theme colors as well, e.g.:\n\n```html\n<mat-toolbar color=\"primary\">My App</mat-toolbar>\n```\n\nMore details about applying themes in your application can be found in [Theming your Angular Material app](https://material.angular.io/guide/theming).\n\n<Divider />\n\n# Additional Information\n\n## Code Formatting / Style\n\nPX Blue provides packages for code standards and style using ESLint and Prettier. These packages are used internally by the PX Blue team, but they can also be used in your projects. You can find instructions for adding these packages to your project on [GitHub](https://github.com/pxblue/code-standards).\n\n## Browser Support\n\nAngular and Angular Material will work with any modern browser. For specific details, you can view their official support pages:\n\n-   [Angular CLI](https://angular.io/guide/browser-support)\n-   [Angular Material](https://github.com/angular/material2#browser-and-screen-reader-support)\n\n> As of Angular 8, the Angular CLI no longer includes support for IE11 by default. If you need to support this browser (not recommended), you can configure your project to support it manually ([Contact us](/community/contactus) for assistance) or use the PX Blue CLI to scaffold your project.\n\n## License Information\n\n[Angular](https://github.com/angular/angular/blob/master/LICENSE) and [Angular Material](https://github.com/angular/material2/blob/master/LICENSE) are both available under the MIT License.\n"
    },
    "/development/frameworks-web/react": {
        "title": "React Guide",
        "text": "import { Divider } from '../../../app/components';\n\n<!-- KEYWORDS: react web framework guide tutorial -->\n\n# Getting Started with React\n\nThe following instructions will guide you through starting a new PX Blue project using React. Alternatively, you can also start your project by downloading one of our code samples from [Github](https://github.com/pxblue) (the Login or Navigation examples are good projects to start from).\n\n## Using the PX Blue CLI\n\nThe fastest way to start a new PX Blue project is to use the [PX Blue CLI](/development/cli). The CLI will automatically create a starter project for you (using [Create React App](https://github.com/facebookincubator/create-react-app)) with all of the necessary PX Blue dependencies pre-configured. To start a React project:\n\n```sh\nnpx -p @pxblue/cli pxb new react\n```\n\nYou will be asked to provide a name for your project, choose whether you would like to use TypeScript or JavaScript, and for TypeScript projects, you'll be asked if you want to use the PX Blue eslint and prettier configurations files.\n\nThe PX Blue CLI will automatically include:\n\n-   Material-UI Component Library and Icons ([@material-ui/core](https://www.npmjs.com/package/@material-ui/core) / [@material-ui/icons](https://www.npmjs.com/package/@material-ui/icons))\n-   PX Blue Component Library ([@pxblue/react-components](https://www.npmjs.com/package/@pxblue/react-components))\n-   PX Blue Themes ([@pxblue/react-themes](https://www.npmjs.com/package/@pxblue/react-themes))\n-   PX Blue Icons ([@pxblue/icons-mui](https://www.npmjs.com/package/@pxblue/icons-mui))\n-   PX Blue Colors ([@pxblue/colors](https://www.npmjs.com/package/@pxblue/colors))\n-   Open Sans web font ([typeface-open-sans](https://www.npmjs.com/package/typeface-open-sans))\n-   PX Blue ESLint and Prettier configurations, if selected ([@pxblue/eslint-config](https://www.npmjs.com/package/@pxblue/eslint-config) / [@pxblue/prettier-config](https://www.npmjs.com/package/@pxblue/prettier-config))\n-   IE 11 Polyfills ([react-app-polyfill](https://www.npmjs.com/package/react-app-polyfill))\n-   Enzyme testing library ([enzyme](https://www.npmjs.com/package/enzyme) / [enzyme-adapter-react-16](https://www.npmjs.com/package/enzyme-adapter-react-16))\n\nFor detailed usage instructions, refer to the [PX Blue CLI documentation](https://www.npmjs.com/package/@pxblue/cli).\n\n## Using an Existing Project\n\nIf you have an existing project and would like to integrate PX Blue, you can follow the manual integration instructions below. If you have not already started your project, we recommend that you scaffold your project with the PX Blue CLI.\n\n<Divider />\n\n# Manual PX Blue Integration\n\nBefore taking the following steps, you'll want to make sure that you have an existing application. If you used the PX Blue CLI to start your project, these steps have already been done for you automatically.\n\n## Including the Component Libraries\n\n### Material UI\n\nReact projects should make use of the [Material-UI](https://material-ui.com/) component library. Our PX Blue themes are designed to work with these components. You'll also want to install the icons.\n\n```sh\nnpm install --save @material-ui/core @material-ui/icons\n// or\nyarn add @material-ui/core @material-ui/icons\n```\n\nFor detailed documentation about the various components available in Material UI, as well as sample code and API reference, refer to the [Material UI Documentation](https://material-ui.com/).\n\n### PX Blue Components\n\nAdditionally, we have a [supplemental library](https://github.com/pxblue/react-component-library/tree/dev) of components designed specifically for PX Blue applications. If you wish to use these components, you can install them by running:\n\n```sh\nnpm install --save @pxblue/react-components\n// or\nyarn add @pxblue/react-components\n```\n\n## Adding PX Blue Themes\n\nBy default, your application will be themed with the Google Material theme. To use the [PX Blue theme](https://www.npmjs.com/package/@pxblue/react-themes), first install it:\n\n```sh\nnpm install --save @pxblue/react-themes\n// or\nyarn add @pxblue/react-themes\n```\n\nInstalling the theme package will automatically include the Open Sans web font package as well as the PX Blue [colors](https://www.npmjs.com/package/@pxblue/colors) package.\n\n### Applying the Theme\n\nImport the theme files, Material UI theme provider, and **Open Sans** font into your application, e.g. in App.js:\n\n```tsx\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport * as PXBThemes from '@pxblue/react-themes';\nrequire('typeface-open-sans');\n```\n\nTo add the theme to your whole application, you would simply add a `<ThemeProvider>` around your top-level component and pass it the theme you want to use, e.g.:\n\n```tsx\n<ThemeProvider theme={createMuiTheme(PXBThemes.blue)}>\n    <CssBaseline/>\n    <MyApp/>\n</MuiThemeProvider>\n```\n\nYou can read about [React Theming](https://material-ui-next.com/customization/themes/) to learn more.\n\n<Divider />\n\n# Additional Information\n\n## Code Formatting / Style\n\nPX Blue provides packages for code standards and style using ESLint and Prettier. These packages are used internally by the PX Blue team, but they can also be used in your projects. You can find instructions for adding these packages to your project on [GitHub](https://github.com/pxblue/code-standards).\n\n> NOTE: the ESLint package is only available for TypeScript projects.\n\n## Browser Support\n\nReact and Material UI will work with any modern browser. For specific details, you can view their official support pages:\n\n-   [React](https://facebook.github.io/create-react-app/docs/supported-browsers-features)\n-   [Material UI](https://material-ui.com/getting-started/supported-platforms/)\n\n> The latest Create React App CLI does not include support for IE11 by default. If you need to support this browser (not recommended), you can configure your project to support it manually ([Contact us](/community/contactus) for assistance) or use the PX Blue CLI to scaffold your project.\n\n## License Information\n\n[React](https://github.com/facebook/react/blob/master/LICENSE) and [Material UI](https://github.com/mui-org/material-ui/blob/master/LICENSE) are both available under the MIT License.\n"
    },
    "/development/frameworks-mobile/intro": {
        "title": "Introduction",
        "text": "import { Divider } from '../../../app/components';\n\n<!-- KEYWORDS: mobile hybrid framework compare comparison -->\n\n# PX Blue Mobile (Hybrid) Frameworks\n\nPower Xpert Blue supports hybrid mobile application development using Ionic and React Native. Both are capable frameworks, but there are some significant differences between them, outlined below.\n\n## Ionic\n\n-   Built with web technology (framework agnostic)\n    -   PX Blue only supports Ionic with Angular\n-   Runs in a WebView\n-   Is the fastest way to have a mobile app (if you already have a web app)\n-   Requires your web app to be optimized for mobile\n-   Has lots of available plugins to access hardware / native functionality\n-   Learn more on the [Ionic Website](https://ionicframework.com/)\n\n## React Native\n\n-   Renders native UI elements (not a WebView)\n-   Can re-use application logic code (React)\n-   Requires writing new code for UI (learning curve)\n-   Does not use CSS for styling (learning curve)\n-   Provides access to hardware functionality through various plugins / libraries\n-   Has a large community of support\n-   Learn more on the [React Native Website](https://facebook.github.io/react-native/)\n\n<Divider style={{}} />\n\n# Which framework should I use?\n\nThis is entirely up to you. If time is your biggest concern, Ionic may be the best approach since it simply wraps an existing application and requires no additional code.\n\nHowever, if you want more control over the look and performance of your application, it may be better to use React Native. If you have a React application, you'd be able to re-use most of your application logic, but you have to write custom / dedicated UI views for mobile.\n\nIn general, if your development team is more familiar with Angular, we recommended using Ionic. If your team is more familiar with React, you won't go wrong by choosing React Native.\n\n<Divider style={{}} />\n\n# Building your application\n\nFollow the guidelines for app development using your chosen framework:\n\n-   [Ionic](/development/frameworks-mobile/ionic)\n    <!-- -   [Apache Cordova](/development/frameworks-mobile/cordova) -->\n-   [React Native](/development/frameworks-mobile/react-native)\n\nThese guides will walk you through the process of developing your application and ultimately creating a final binary to distribute (either to your testers or your final customers).\n\n## Deploying your application\n\nOnce you have built your application into a distributable binary, there are two options for distributing it.\n\n### Visual Studio App Center (formerly HockeyApp)\n\nVisual Studio App Center gives you a way to test your app with users before you are ready for final distribution. This service allows you to upload app binaries and create lists of people with whom to share them. These people will be notified via email when new versions of the app are available, and they will be prompted to download and install them directly onto their device. You will need to request access to Visual Studio App Center from IT.\n\n### App Store / Play Store\n\nFor final distribution of your application, you will need to utilize App Store Connect and / or Google Play Console.\n"
    },
    "/development/frameworks-mobile/ionic": {
        "title": "Ionic Guide",
        "text": "import { Divider } from '../../../app/components';\r\n\r\n<!-- KEYWORDS: ionic mobile hybrid framework guide tutorial -->\r\n\r\n# Getting Started with Ionic\r\n\r\nThe following instructions will guide you through setting up your computer for Ionic development and starting a new PX Blue project. Alternatively, you can start your project by downloading one of our code samples from [Github](https://github.com/pxblue) (the Login example is a good project to start from) once you configure your environment.\r\n\r\n<Divider />\r\n\r\n# Setting Up Your Environment\r\n\r\nYou'll need to start by following the general instructions for setting up your development environment for mobile, found in our [Environment Guide](/development/environment). Since Ionic takes advantage of web technologies, you won't need any specific additional tools beyond what you would use for web development.\r\n\r\nIonic uses Cordova behind the scenes but offers some additional convenience tools on top. If you would prefer to write a pure Cordova application, you can read instructions in the [Apache Cordova Getting Started Guide](/development/frameworks-mobile/cordova).\r\n\r\n## Installing Ionic\r\n\r\nThe most up-to-date instructions for setting up Ionic can be found on the [Ionic Website](https://ionicframework.com/docs/installation/cli).\r\n\r\nTo get started, run:\r\n\r\n```sh\r\nnpm install -g ionic cordova\r\n// or\r\nyarn global add ionic cordova\r\n```\r\n\r\nYou'll also want to install some additional dependencies:\r\n\r\n```sh\r\nnpm install -g native-run gradle cordova-res\r\n// or\r\nyarn global add native-run gradle cordova-res\r\n```\r\n\r\nMake sure that you have a `GRADLE_HOME` entry in your PATH variable pointing to your gradle binary directory.\r\n\r\n<Divider />\r\n\r\n# Creating Your Application\r\n\r\n## Using the PX Blue CLI\r\n\r\nThe fastest way to start a new PX Blue project is to use the [PX Blue CLI](/development/cli). The CLI will automatically create a starter project for you (using either the [Ionic CLI](https://ionicframework.com/docs/cli)) with all of the necessary PX Blue dependencies pre-configured. To start an Ionic project:\r\n\r\n```sh\r\nnpx -p @pxblue/cli pxb new ionic\r\n```\r\n\r\nYou will be asked to provide a name for your project and whether or not you want to use the PX Blue eslint and prettier configurations files.\r\n\r\nThe PX Blue CLI will automatically include:\r\n\r\n-   Angular Material Component Library ([@angular/material](https://www.npmjs.com/package/@angular/material))\r\n-   PX Blue Component Library ([@pxblue/angular-components](https://www.npmjs.com/package/@pxblue/angular-components))\r\n-   PX Blue Themes ([@pxblue/angular-themes](https://www.npmjs.com/package/@pxblue/angular-themes))\r\n-   PX Blue Icons ([@pxblue/icons](https://www.npmjs.com/package/@pxblue/icons))\r\n-   PX Blue Colors ([@pxblue/colors](https://www.npmjs.com/package/@pxblue/colors))\r\n-   PX Blue ESLint and Prettier configurations, if selected ([@pxblue/eslint-config](https://www.npmjs.com/package/@pxblue/eslint-config) / [@pxblue/prettier-config](https://www.npmjs.com/package/@pxblue/prettier-config))\r\n\r\nFor detailed usage instructions, refer to the [PX Blue CLI documentation](https://www.npmjs.com/package/@pxblue/cli).\r\n\r\n## Using an Existing Project\r\n\r\nIf you have an existing project and would like to integrate PX Blue, you can follow the manual integration instructions below. If you have not already started your project, we recommend that you scaffold your project with the PX Blue CLI.\r\n\r\n<Divider />\r\n\r\n# Manual PX Blue Integration\r\n\r\nPlease refer to the Manual PX Blue Integration steps for [Angular](/development/frameworks-web/angular).\r\n\r\n<Divider />\r\n\r\n# Writing an Ionic Application\r\n\r\nDeveloping an Ionic project with Angular is virtually identical to writing a normal web application using Angular.\r\n\r\n## Running your application\r\n\r\n`ionic serve` will run the application in a web browser on localhost:8100. In order to see the application run on a mobile device, you will need to add platforms.\r\n\r\n```sh\r\nionic cordova platform add android\r\nionic cordova platform add ios\r\n```\r\n\r\n> **NOTE**: You will only be able to add the ios platform if you are developing on a Mac.\r\n\r\nWhen the ionic cordova platform add completes, your project will have all the required native plugins installed along with several configuration files specific to your project.\r\n\r\n## Building your application\r\n\r\nThe project is now ready to build and you can run:\r\n\r\n```sh\r\nionic cordova build android\r\nionic cordova build ios\r\n```\r\n\r\nOnce complete, you can run your project in a device simulator (or connected device) by running:\r\n\r\n```sh\r\nionic cordova run android\r\nionic cordova run ios\r\n```\r\n\r\n<Divider />\r\n\r\n# Additional Information\r\n\r\n## Code Formatting / Style\r\n\r\nPX Blue provides packages for code standards and style using ESLint and Prettier. These packages are used internally by the PX Blue team, but they can also be used in your projects. You can find instructions for adding these packages to your project on [GitHub](https://github.com/pxblue/code-standards).\r\n\r\n> **NOTE**: Depending on your version of Xcode, you may need to specify additional build flags to run on ios: `ionic cordova run ios --buildFlag=\"-UseModernBuildSystem=0\"`.\r\n\r\n## License Information\r\n\r\n[Ionic](https://ionicframework.com/docs/intro#license) is available under the MIT License.\r\n"
    },
    "/development/frameworks-mobile/react-native": {
        "title": "React Native Guide",
        "text": "import { Divider } from '../../../app/components';\n\n<!-- KEYWORDS: react native mobile hybrid framework guide tutorial -->\n\n# Getting Started with React Native\n\nThe following instructions will guide you through setting up your computer for React Native development and starting a new PX Blue project. Alternatively, you can start your project by downloading one of our code samples from [GitHub](https://github.com/pxblue) (the Login example is a good project to start from) once you configure your environment.\n\n<Divider />\n\n# Setting Up Your Environment\n\nYou'll need to start by following the general instructions for setting up your development environment for mobile found in our [Environment Guide](/development/environment). In addition to the base requirements, you may also want the following:\n\n-   [Expo Client](https://expo.io/learn) (project creation / setup tool for React Native apps)(optional, for Expo projects)\n\n<Divider />\n\n# Creating Your Application\n\n## Using the PX Blue CLI\n\nThe fastest way to start a new PX Blue project is to use the [PX Blue CLI](/development/cli). The CLI will automatically create a starter project for you (using either the [React Native Community CLI](https://github.com/react-native-community/cli) (recommended) or [Expo CLI](https://docs.expo.io/)) with all of the necessary PX Blue dependencies pre-configured. To start a React Native project:\n\n```sh\nnpx -p @pxblue/cli pxb new react-native\n```\n\nYou will be asked to provide a name for your project, select a CLI to use, choose whether you would like to use TypeScript or JavaScript, and for TypeScript projects, you'll be asked if you want to use the PX Blue eslint and prettier configurations files.\n\nThe PX Blue CLI will automatically include:\n\n-   React Native Paper Component Library ([react-native-paper](https://www.npmjs.com/package/react-native-paper))\n-   PX Blue Component Library ([@pxblue/react-native-components](https://www.npmjs.com/package/@pxblue/react-native-components))\n-   PX Blue Themes ([@pxblue/react-native-themes](https://www.npmjs.com/package/@pxblue/react-native-themes))\n-   Material Icons ([react-native-vector-icons](https://www.npmjs.com/package/react-native-vector-icons))\n-   PX Blue Icons ([@pxblue/icons-svg](https://www.npmjs.com/package/@pxblue/icons-svg))\n-   PX Blue Colors ([@pxblue/colors](https://www.npmjs.com/package/@pxblue/colors))\n-   Open Sans font\n-   PX Blue ESLint and Prettier configurations, if selected ([@pxblue/eslint-config](https://www.npmjs.com/package/@pxblue/eslint-config) / [@pxblue/prettier-config](https://www.npmjs.com/package/@pxblue/prettier-config))\n-   Testing libraries ([jest](https://www.npmjs.com/package/jest) / [react-test-renderer](https://www.npmjs.com/package/react-test-renderer))\n\nFor detailed usage instructions, refer to the [PX Blue CLI documentation](https://www.npmjs.com/package/@pxblue/cli).\n\n## Using an Existing Project\n\nIf you have an existing project and would like to integrate PX Blue, you can follow the manual integration instructions below. If you have not already started your project, we recommend that you scaffold your project with the PX Blue CLI.\n\n<Divider />\n\n# Manual PX Blue Integration\n\nBefore taking the following steps, you'll want to make sure that you have an existing application. If you used the PX Blue CLI to start your project, these steps have already been done for you automatically.\n\n## Including the Component Libraries\n\n### Material Components\n\nReact Native projects should make use of the [React-Native-Paper](https://callstack.github.io/react-native-paper/index.html) component library. Our PX Blue themes are designed to work with these components. You'll also want to install [react-native-vector-icons](https://www.npmjs.com/package/react-native-vector-icons) to access the Material icons.\n\n```sh\nnpm install --save react-native-paper react-native-vector-icons\n// or\nyarn add react-native-paper react-native-vector-icons\n```\n\n### PX Blue Components\n\nWe have a [supplemental library](https://github.com/pxblue/react-native-component-library/tree/dev) of components designed specifically for PX Blue applications. If you wish to use these components, you can install them by running:\n\n```sh\nnpm install --save @pxblue/react-components\n// or\nyarn add @pxblue/react-native-components\n```\n\n## Adding PX Blue Themes\n\nIf you are using the recommended component libraries, your application will be themed with the Google Material theme by default. To use the PX Blue theme, first install it:\n\n```sh\nnpm install --save @pxblue/react-native-themes\n// or\nyarn add @pxblue/react-native-themes\n```\n\n> Using the PX Blue React Native theme **requires** that you add the Open Sans font to your application. You can learn how to do this by reading the instructions for [Vanilla React Native](https://medium.com/react-native-training/react-native-custom-fonts-ccc9aacf9e5e) or [Expo](https://docs.expo.io/guides/using-custom-fonts/). You can find the fonts [here](https://github.com/pxblue/cli-helpers/tree/master/fonts).\n\n> When using Expo, you will need to specify the name for each font weight you load using the format OpenSans-`<Weight>`, e.g., OpenSans-SemiBold. Refer to one of our React Native demos for reference.\n\n## Applying the Theme\n\nImport the theme files and React Native Paper theme provider into your application, e.g. in App.js:\n\n```tsx\nimport { Provider as ThemeProvider } from 'react-native-paper';\nimport * as PXBThemes from '@pxblue/react-native-themes';\n...\n<ThemeProvider theme={PXBThemes.blue}>\n    <App />\n</ThemeProvider>\n```\n\nFor detailed information about theming, refer to the react-native-paper [theming guide](https://callstack.github.io/react-native-paper/theming.html).\n\n> NOTE: This theme only applies to the components in the react-native-paper and @pxblue/react-native-components package. It will not theme the components from other third party libraries. If you wish to use our theme to style your own components, refer to the react-native-paper [theming guide](https://callstack.github.io/react-native-paper/theming.html#using-the-theme-in-your-own-components).\n\n### Avoiding Repeated Styles\n\nTo avoid adding repeatedly adding inline styles to standard components, you can define your own component that applies the styles and use that throughout your application, e.g.:\n\n```tsx\n// MyText.js\nexport default MyText = ({style, children, ...other}) => (\n    <Text {...other} style={StyleSheet.flatten([{/* Theme styles here */}, style])}>\n        {children}\n    </Text>\n);\n\n// OtherFile.js\nimport Text from 'path/to/MyText.js';\n...\n<Text>Themed Text Object</Text>\n```\n\n<Divider />\n\n# Writing a React Native Application\n\nIf you are familiar with React development, React Native will be relatively simple to understand. The application logic remains the same, while the UI requires a little adjustment. Rather than typical HTML elements, React Native UIs are built with a special library of [Components](https://facebook.github.io/react-native/docs/components-and-apis), including `<View>`, `<Text>`, `<Image>`, etc. React Native layouts are built exclusively using FlexBox.\n\n## Running your application\n\nAfter you've created your application with a CLI, it can be run from the command line:\n\n```sh\ncd YourAppName\n\n// RNC CLI\nnpm run <ios|android>\n// or\nyarn <ios|android>\n\n// Expo CLI (follow the on-screen instructions or use the web interface to open the app on a device)\nnpm run start\n// or\nyarn start\n```\n\nWhen you make changes to the source code, the application will automatically rebuild and update on the device.\n\n> To run on an Android emulator, the emulator must already be running or you will see an error message, \"No connected devices found.\"\n\n> On a Mac, you may be prompted to install watchman (`brew install watchman`) or update a few settings to run the application.\n\n## Ejecting from Expo\n\nIf you use Expo to create your project, there will come a time in your development when it becomes necessary to eject from Expo. The most common reason for this are for adding native libraries to your project.\n\nTo eject your app, run the following and follow the on-screen prompts (WARNING: Ejecting from Expo cannot be undone. Make sure you know what you are doing and have your project in source control before proceeding):\n\n```sh\nnpm run eject\n// or\nyarn eject\n```\n\n> -   At the first prompt, select 'Bare (first option)'\n> -   At the second prompt, accept the default value (press Enter). Changing this can cause issues running your project.\n> -   At the third prompt, enter a name for the solution folder.\n\nFor more information, read about [ejecting from Expo](https://docs.expo.io/workflow/customizing/).\n\n## Final Build\n\nAfter ejecting from Expo, the process for creating a build is the same as for a standard native application. You can open the project folders in xCode (/ios/projectName.xcodeproj) or Android Studio (/android) and perform builds from the IDE. There are also npm scripts added to your package.json file during ejection that will allow you to perform builds from the command line. Depending on the version of React Native you are using, you may have to [manually bundle your JS code](https://stackoverflow.com/questions/44446523/unable-to-load-script-from-assets-index-android-bundle-on-windows) for Android.\n\n<Divider />\n\n# Additional Information\n\n## RNC CLI vs. Expo CLI\n\nThere are two popular approaches to starting a new React Native project. The first (recommended) is to use the [React Native Community CLI](https://github.com/react-native-community/cli) and the second is to use the [Expo CLI](https://docs.expo.io/workflow/expo-cli/). The Expo CLI is nice for spinning up quick projects and demos, but to use certain libraries/plugins you will need to eject to vanilla React Native. For this reason, we recommend most production applications start with the RNC CLI instead to avoid the complications of ejecting.\n\n> **NOTE:** PX Blue examples are written using the Expo CLI. The primary reason for this is because it provides the ability to share live-running code examples via [Snack](https://snack.expo.io/).\n\n## Code Formatting / Style\n\nPX Blue provides packages for code standards and style using ESLint and Prettier. These packages are used internally by the PX Blue team, but they can also be used in your projects. You can find instructions for adding these packages to your project on [GitHub](https://github.com/pxblue/code-standards).\n\n> NOTE: the ESLint package is only available for TypeScript projects.\n\n## Component recommendations\n\nThere are a lot of resources and components available on the market to help speed up your development and improve reusability. React Native also comes with a built-in component library. We recommend the following:\n\n-   Navigation\n    -   [React Navigation](https://reactnavigation.org/) (JS-only implementation)\n    -   [React Native Navigation](https://wix.github.io/react-native-navigation/#/) (native implementation)\n-   Component Libraries\n    -   [React Native Built-in Components](https://facebook.github.io/react-native/docs/components-and-apis.html)\n    -   [React Native Paper](https://callstack.github.io/react-native-paper/)\n    -   [React Native Elements](https://react-native-training.github.io/react-native-elements/)\n\n## License Information\n\n[React Native](https://github.com/facebook/react-native/blob/master/LICENSE) is available under the MIT License.\n"
    },
    "/development/testing": {
        "title": "Testing",
        "text": "import { DemoCard, ImageGrid, MaterialDesignDescription, Divider } from '../../app/components';\n\n# Testing Your PX Blue Applications\n\n<!-- KEYWORDS: testing test unit e2e tdd bdd integration cypress -->\n\nTesting is a critical component of successfully building and releasing an application. Despite the value and importance of testing, it is common for teams to overlook or neglect it. Testing should be considered from the very beginning of development, not as an afterthought once development is complete. In general, every time you write a new piece of code or update existing code, you should also write a test that verifies that your code is correct.\n\nThere are many [varieties of tests](https://www.atlassian.com/continuous-delivery/software-testing/types-of-software-testing), each with their own intended purpose. The most common types of tests are:\n\n-   **Unit Tests**: verify individual methods, functions, or components.\n-   **Integration Tests**: verify that different modules or services in your application work together.\n-   **Functional Tests**: verify the output of certain actions based on business requirements.\n-   **End-to-end (E2E) Tests**: verify that user behaviors / workflows function as expected.\n-   **Acceptance Tests**: verify that the entire system meets the business requirements.\n-   **Performance Tests**: verify that the system behaves correctly under heavy load.\n-   **Smoke Tests: quick**: basic checks of the major features of the application.\n\nThis document focuses mainly on Unit Tests and E2E tests, as they are the easiest to automate.\n\n<Divider />\n\n# Unit Tests\n\nUnit tests target the smallest pieces of your application (such as verifying inputs and outputs of a class method or function). These will likely make up the bulk of your tests because they are quick to write, easy to automate, and can help you achieve significant code coverage.\n\n> Code Coverage measures the percentage of your code that is verified by your tests.\n\nA unit test shouldn't have any external dependencies, such as other methods or APIs. By keeping unit tests isolated in this manner, it's easy to identify the cause of a failing test and implement a fix quickly. When you start combining features and methods together, you move into the realm of _integration testing_.\n\n## When to Write\n\nAs long as you are writing tests and achieving acceptable levels of coverage, the _when_ is not as important.\n\nSome teams elect to follow a Test-Driven Development (TDD) methodology, where unit tests are written prior to any code. In this situation the tests actually define the desired implementation of the application and the code is written to satisfy the tests.\n\nBehavior-Driven Development (BDD) is similar to TDD in that test cases are written prior to writing any applications code. However, these test cases focus more on the desired behavior (inputs and outputs) of the application, and less on the actual implementation. These are usually written in plain language rather than code.\n\nThe most important thing to keep in mind about tests is that they should provide confidence that the code and design are working as intended without issues in any scenario. For most teams, it's fine to write tests after features and functions are developed, so long as you write quality tests and achieve good coverage.\n\n## How to Write\n\nWhen unit testing components, the most effective tests are based on what is actually rendered on the screen rather than the internal implementation logic. The test should consider the application from the user's perspective and test things the user views and interacts with.\n\nFor example, consider testing an Open Button that should open a modal dialog when clicked. Your test should check that a button with the _Open_ label is rendered on the screen, and when it is clicked, the dialog is rendered on the screen with the correct content. You may be tempted to identify the button by a class or id, or test that a particular function is called when the button is pressed - these tests are not as effective because they are more likely to break if the implementation of the component changes, even though the end behavior is the same.\n\n-   Test what the user sees (i.e., rendered output) and what the user can do  (i.e., interactions).\n-   If there is visual change after an interaction, test for it.\n-   If there is a value returned after an action, test for it.\n\n## Testing Frameworks\n\nAngular, React, and React Native all come with built-in unit testing frameworks. Ionic can be unit tested using the same tools you would use for a standard Angular application.\n\n### Angular\n\nThe Angular CLI comes pre-configured with [Jasmine](https://jasmine.github.io/2.0/introduction) and [Karma](https://karma-runner.github.io/latest/index.html) for unit testing. When you create a new project, sample tests are created in your project for you (test files are identified by the `.spec.ts` file extension). You can execute the tests by running the following in your terminal:\n\n```sh\ncd your/project/root\nng test\n```\n\nThis will build your app and launch the browser with the test runner.\n\n### React\n\nThe Create React App CLI is pre-configured with the [Jest](https://github.com/facebook/jest) testing framework. When creating a new project, a sample test is created in your project for you (test files are identified by the `.test.js` or `test.ts` file extension). You can execute the tests by running the following in your terminal:\n\n```sh\ncd your/project/root\nnpm run test\n// or\nyarn test\n```\n\nThis will run your tests and show the pass / fail output in the terminal.\n\nThere are additional test utilities that complement Jest well. [Create React App](https://facebook.github.io/create-react-app/docs/running-tests) provides access to [React Testing Library](https://www.npmjs.com/package/@testing-library/react) through the `react-dom` dependency. The PX Blue team has also made use of [Enzyme](https://airbnb.io/enzyme/), a testing framework created by AirBnB, and [Test Renderer](https://reactjs.org/docs/test-renderer.html).\n\n### React Native\n\nLike React, the React Native CLI also bundles Jest into your application. Most of the testing strategies and libraries can be shared between the two frameworks. You can also consider additional libraries like [React Native Testing Library](https://www.npmjs.com/package/@testing-library/react-native).\n\n### Ionic\n\nWhen creating an Ionic project with Angular, the Angular CLI is used to generate the underlying project, so you have access to all the same testing tools as you would with a regular Angular project.\n\n<Divider />\n\n# End-to-End Testing\n\nEnd-to-end tests at a step above unit tests, both in terms of complexity and what they test. They focus primarily on the flow of the application, making sure that a user's journey through the application has the expected outcomes. These tests can generally be categorized as:\n\n-   **Acceptance Tests**: verify that various features and flows meet the customer expectations.\n-   **Regression Tests**: verify that existing functionality is not broken when new features are added.\n\nThey should cover user stories that span multiple components and views, such as signing up for an accounts, logging in and out of the application, updating a profile, etc. These tests are not concerned with the underlying state or implementation of the application - just the end results.\n\nEnd-to-end tests usually run in a browser against a live system (in the case of web, using a test runner that automates the browser). Automated E2E tests can take a long time to run because of all of the different pieces involved and the scope of the tests. You should try to optimize your testing pipeline to run tests in parallel to finish faster.\n\nFunctional tests alone will not give you enough test coverage to avoid regressions. Unit tests aim to provide code coverage depth, while functional tests provide coverage over the breadth of user test scenarios.\n\n## How to Write\n\nEnd-to-end tests rely on the ability to find elements on the screen and interact with them in an automated way. This means that you need a reliable mechanism for selecting elements. Depending on your testing framework, there are different ways to select elements, including:\n\n-   **CSS Selectors**: find elements by using CSS classes or rules (e.g., `.your-class-name`)\n-   **Element Selectors**: find elements inside the elements (e.g., `#\\@\\@pxb-drawerlayout-content > div > header > div > button`)\n-   **xPath Selectors**: find selector within xPath (e.g., `//*[@id=\"@@pxb-drawerlayout-content\"]/div/header/div/button`)\n-   **ID Selectors**: find attribute id within elements (e.g., `#login-button`)\n\n> You can read more about different selector strategies on [browserstack](https://www.browserstack.com/guide/css-selectors-in-selenium) and [software testing help](https://www.softwaretestinghelp.com/css-selector-selenium-locator-selenium-tutorial-6/).\n\nEach of these methods has their own advantages and disadvantages. A common pain point in E2E test automation is that modern Javascript platforms are constantly changing, particularly in the open source community. Many of these frameworks automatically (and dynamically) generate IDs and classes for components resulting in a constantly moving target for automation tooling. Identifying elements by these values (i.e., using IDs, CSS, or xPath locators _without_ property attributes) makes your tests brittle because they are subject to change any time a new version comes out (or even any time the page is reloaded).\n\nOne way to combat this in your own applications is to use dedicated attributes for testing (e.g., `test-id` or `dev-id`). By adding this test-specific attribute to the element, identifying the correct underlying component should be safer. Because this attribute is test-specific and the application logic does not use it, it will be less likely to change throughout the product lifecycle. Combining this approach with other selectors is a common and reliable approach for element identification.\n\n```html\n<!-- Component code -->\n<button id=\"login-button\" class=\"default-button\">Login</button>\n\n<!-- Selector to use in a test -->\nWebElement click = driver.findElement(By.id(\"login-button\"));\n```\n\n## Testing Frameworks\n\nThere are many tools available for configuring automated E2E tests. Some of the more popular tools include:\n\n-   [Selenium](https://www.selenium.dev/documentation/en/)\n-   [Cypress](https://docs.cypress.io/guides/overview/why-cypress.html#In-a-nutshell)\n-   [WebDriverIO](https://webdriver.io/docs/gettingstarted.html)\n\n### Selenium\n\nSelenium is a popular automation testing suite which can be used to automate the desktop and mobile web browser interactions. You can write test code in any of the languages supported by Selenium.\n\nSelenium test suite has several test frameworks available and each one can be customized to your project needs.\n\nFor more information, check out the browserstack [selenium guide](https://www.browserstack.com/guide/selenium-framework) or the official [selenium documentation](https://github.com/SeleniumHQ/selenium).\n\nThere are also a number of [Selenium tutorials](https://www.softwaretestinghelp.com/selenium-tutorial-1/) available online to help you get started.\n\n### Cypress\n\nCypress is a popular open source testing framework that boasts support for any modern JavaScript framework. It works well for E2E tests in both Angular and React applications and is easier to use than some of the more traditional tools, such as Selenium.\n\nFor a more detailed write-up on Cypress, check out the official [Cypress Documentation](https://docs.cypress.io/guides/getting-started/installing-cypress.html#System-requirements).\n\n### WebDriverIO\n\nWebdriverIO is a popular Javascript based test automation framework built on top of node.js. It is an open-source project developed for the automation testing community. WebdriverIO is extendible, compatible and feature-rich.\n\nFor more information, check out the official [Webdriver.io documentation](https://webdriver.io/) and their [getting started guide](https://webdriver.io/docs/gettingstarted.html).\n\n<Divider />\n"
    },
    "/design/intro": {
        "title": "Introduction",
        "text": "import { Divider } from '../../app/components';\n\n<!-- KEYWORDS: design tutorial environment -->\n\n# Designing with PX Blue\n\nUsing the PX Blue design system as a designer can greatly improve your efficiency and the quality of your products. PX Blue has many patterns and guidelines (color usage, typography, iconography, etc.) to address the most common elements and interactions that you might encounter when designing a product. By following these recommendations and using pre-defined resources from PX Blue, your time is free to focus on the elements that make your project unique. In general, we recommend trying to use PX Blue for 80% of your product's needs.\n\n## Environment\n\nWe host and maintain our design assets through Figma. Figma is a powerful prototyping tool that facilitates collaboration and sharing of design assets between teams. It can be used on the web, and they also provide a desktop app for Mac and Windows. In order to use Figma, you will need to [sign up](https://www.figma.com/) for an account.\n\n## What Materials are Available?\n\nPX Blue has design / style guidelines for:\n\n-   [Typography](/style/typography)\n-   [Iconography](/style/iconography)\n-   [Color Usage](/style/color)\n-   [Themes](/style/themes)\n\nIn addition to these guidelines, we also provide [an easy-to-use plugin](https://www.figma.com/community/file/852558784352181868) that you can include in your Figma projects to jump start your project with pre-defined UI styles and components. You are encouraged to duplicate this file to your own draft space and build your project on top of it.\n\n<Divider />\n\n# General Guidance\n\nThe best designs generally start with mobile first, and that's what we recommend as well when working with the PX Blue design system. It's much easier to scale designs up than to scale them down. We also strongly encourage you to perform extensive user research to truly understand your users and their needs, skills, preferences, and tendencies.\n\n## Web Applications\n\nKeep the interface simple - avoid unnecessary elements and ensure the language used for labels and messaging is clear.\n\n<!--image-->\n\nStrive for consistency by using pre-defined PX Blue UI elements where possible. By using these elements, your users will feel more familiar and will be able to get things done quickly. You can also help ensure consistency by defining patterns in language, layout, and design that are used throughout the application.\n\n<!--image-->\n\nBe purposeful when laying out page content. Consider space and the relationship between items on the page. Structure pages based on importance.\n\n<!--image-->\n\nUse the typography guidelines to create hierarchy and clarity. An effective type hierarchy increases scalability, legibility, and readability.\n\n<!--image-->\n\nEnsure that the application provides effective feedback to users. Make sure that you communicate location, actions, changes in state, and errors to users. PX Blue has various UI elements to assist with communicating this information.\n\n<!--image-->\n\nConsider using defaults. If you have a strong understanding of the users of your application, careful planning around default states, actions, and paths can reduce the burden on your users.\n\n<!--image-->\n\n## Mobile Applications\n\nGenerally, interfaces less than seven inches in width should be treated as a mobile (phone) device. Font styles and layouts should be consistent across devices as much as possible - your product should feel like the same application regardless of the device used to access it. When working with a dedicated mobile app, familiarize yourself with device / platform capabilities and take advantage of these where possible.\n\n<!--image-->\n\nA fundamental principle for mobile design is to include only the information that is necessary. Don't overload the user with excessive information. Mobile devices are a convenient way to quickly consume information on the go and the information presented should reflect this.\n\n<!--image-->\n\nInterfaces greater than seven inches in width should be treated as a tablet device. As with phone devices, font styles and layouts should be consistent across devices in this class. However, you may find it appropriate to have some differences between phone and tablet devices because of the difference in screen real estate.\n\n<!--image-->\n\nTablet designs should look and feel like a desktop application / website, but they should function like a phone app.\n\n<!--image-->\n\nAs technology continues to evolve, it is important to consider scaling for the future. Products such as non-mobile touch screens, interactive displays, automotive displays, and touch screen laptops should be considered during your design phase.\n\n<!--image-->\n\n<Divider style={{}} />\n\n# Contributing\n\nWe encourage everyone to provide feedback, new design concepts, patterns, suggestions, or other ideas to help us create the most useful design system for our community. If you would like to contribute back, please [contact us](/community/contactus)!\n\nIn order to maintain the quality standards for PX Blue resources, any submissions will be subject to review by the PX Blue maintainers. If your design is made a part of PX Blue, we'll add items onto our backlog to bring them to life in code for developers to use.\n"
    },
    "/design/anatomy": {
        "title": "Design System Anatomy",
        "text": "import { Divider, ImageGrid, RegularWidth } from '../../app/components';\nimport CategoriesImg from '../../app/assets/resource-anatomy/resource-categories.png';\nimport PatternStatesImg from '../../app/assets/resource-anatomy/pattern-states.png';\n\n<!-- KEYWORDS: design anatomy components pages patterns workflows atomic -->\n\n# Design System Anatomy\n\nThe building blocks of the PX Blue design system are broken down into four levels of increasing complexity: elements, components, pages, and workflows. When communicating with other members of the PX Blue community, you should strive to use this terminology to promote effective collaboration and understanding. This is applicable to designers, developers, product managers, etc.\n\n<ImageGrid images={[CategoriesImg]} regularWidth caption={'The four levels of the PX Blue design system hierarchy.'} />\n\n## Foundations\n\nThe foundations include the most basic visual elements on the page, such as [color](/style/color), [icons](/style/iconography), [typography](/style/typography), etc. These typically have no behavior or interaction on their own, but instead are used to communicate information to a user, establish a brand, or lay the foundations for the PX Blue components, pages, and workflows.\n\n## Components\n\nComponents are the basic functional units of the UI. They are usually interactive through clicking, expanding, etc. Components can be as simple (such as buttons, tabs, sliders) or complex (such as [navigation drawers](/patterns/navigation)). Simpler components are often combined to form complex ones.\n\nMost of the simple components in PX Blue are defined and built by Material Design and the component libraries that implement it. PX Blue focuses on defining and building advanced components that are shared across PX Blue applications.\n\n## Pages\n\nPages are the largest single unit in the PX Blue design system. These are typically full-screen designs that specify how certain pages can look in an application. Foundation of these pages should stay the same while there may be some room for customizations. Examples of pages include \"login (empty fields)\" and \"create password (invalid)\".\n\n## Workflows\n\nWorkflows are a sequence of pages combined with rules surrounding how a user goes from one page to another. These usually represent a common path that a user is expected to take to complete various tasks. Workflows that are defined in PX Blue are intended to be nearly identical between applications. Examples of very common workflows include the [login](/patterns/login) experience and user registration / sign up.\n\n<Divider />\n\n# Design Patterns\n\n<RegularWidth>\n    <ImageGrid images={[PatternStatesImg]} regularWidth />\n</RegularWidth>\n\n[Design patterns](/patterns) are very common in PX Blue. A design pattern is a common interaction or behavior that can exist at any level in the design system hierarchy described above. For example, we may have a design pattern for showing actions available on a list item or how to interact with individual settings on a settings page.\n\nBecause a design pattern centers around interactions, they typically include different states. A button can be normal, hovered, or pressed. Similarly, a login workflow can involve login with 2FA, Captcha, or simply a username and password.\n\nFor each state, PX Blue tries to provide:\n\n-   Guidelines: How it's used and in what context\n-   Design Specifications: How it looks\n-   Interactions: How it goes from one state to another\n-   Code: How it can be implemented\n\n<Divider />\n\n# PX Blue and the Atomic Design System\n\nIf you are familiar with other design systems, such as the [Atomic Design System](https://atomicdesign.bradfrost.com/), you may recognize some concepts used here. PX Blue's \"components\" parallel Atomic Design's atoms, molecules, and organisms. The idea of \"pages\" is the same in both systems, but PX Blue also goes one level further in each direction (i.e., Foundations and Workflows) to define a project's user experience more comprehensively.\n"
    },
    "/patterns": { "title": "Design Patterns" },
    "/patterns/appbar": {
        "title": "App Bars",
        "text": "import { DemoCard, ImageGrid, MaterialDesignDescription, Divider } from '../../app/components';\nimport Banner from '../../app/assets/design-patterns/app-bar/appbar-banner.png';\nimport Collapsible from '../../app/assets/design-patterns/app-bar/collapsible-appbar/collapsible.gif';\nimport Search from '../../app/assets/design-patterns/app-bar/search-bar/search.gif';\nimport MiniSearch from '../../app/assets/design-patterns/app-bar/search-bar/mini-search.png';\nimport Collapsed from '../../app/assets/design-patterns/app-bar/collapsible-appbar/collapsed.png';\nimport AutoVariants from '../../app/assets/design-patterns/app-bar/search-bar/auto-complete-variants.png';\nimport BasicBars from '../../app/assets/design-patterns/app-bar/basic-app-bars.png';\nimport DropdownVariations from '../../app/assets/design-patterns/app-bar/dropdown-toolbar-variations.png';\nimport Specs1Image from '../../app/assets/design-patterns/app-bar/specs-1.png';\nimport Specs3Image from '../../app/assets/design-patterns/app-bar/specs-3.png';\nimport Specs4Image from '../../app/assets/design-patterns/app-bar/specs-4.png';\n\n<!-- KEYWORDS: design pattern appbar search collapse toolbar banner -->\n\n# App Bars\n\n<ImageGrid images={[Banner]} regularWidth />\n\nApp bars, sometimes called toolbars, are often one of the first elements you see in an application. They are primarily used to provide context for where a user is in the hierarchy of the application.\n\n<React.Fragment>\n    <MaterialDesignDescription title={'App Bars: Top'} url={'https://material.io/components/app-bars-top/'} />\n    <Divider />\n</React.Fragment>\n\n# Basic App Bar\n\n<ImageGrid regularWidth images={[BasicBars]} caption={'Basic app bars in order of increasing complexity.'} />\n\nThe basic app bar provides information about the current screen. Typically, this is a short title that indicates which screen the user is on (e.g., \"Settings\"). However, the app bar can also contain a navigation icon, subtitle, and/or various global action buttons for the screen. When placing actions in the app bar, limit yourself to no more than three. If you have more actions than this, consider grouping them into a menu.\n\n## Dropdown Toolbar\n\n<React.Fragment>\n    <ImageGrid\n        regularWidth\n        images={[DropdownVariations]}\n        caption={[\n            '1. On mobile, the dropdown toolbar opens the options panel in a bottom sheet.',\n            '2. On desktop, the dropdown opens as a menu below the toolbar.',\n        ]}\n    />\n    <DemoCard\n        repository={'Dropdown Toolbar'}\n        angular={\n            'https://pxblue-components.github.io/angular/?path=/story/components-dropdown-toolbar--with-full-config'\n        }\n        react={'https://pxblue-components.github.io/react/?path=/story/components-dropdown-toolbar--with-full-config'}\n        ionic\n        reactNative\n    />\n</React.Fragment>\n\nA special case of the basic app bar is the dropdown toolbar. This version transforms the simple text subtitle of the app bar into a dropdown menu that can be used to configure the page. For example, you may have a dropdown that allows users to switch between different physical locations on an overview screen.\n\n<Divider />\n\n# Collapsible App Bar\n\n<React.Fragment>\n    <ImageGrid\n        images={[Collapsible, Collapsed]}\n        gridImageProps={{ style: { maxHeight: 265, overflow: 'hidden' } }}\n        caption={['The middle row of text shrinks in size and opacity until it disappears.']}\n    />\n    <DemoCard\n        repository={'collapsible-appbar'}\n        angular={\n            'https://stackblitz.com/github/pxblue/angular-design-patterns?file=src%2Fapp%2Fpages%2Fapp-bar%2Fcollapsible-app-bar%2Fcollapsible-app-bar.component.ts'\n        }\n        react={\n            'https://codesandbox.io/s/github/pxblue/react-design-patterns/tree/master?file=/src/pages/app-bar/collapsible-app-bar/index.tsx&initialpath=collapsible'\n        }\n        ionic\n        reactNative\n    />\n</React.Fragment>\n\nIn some situations, you may want to present more than just a title and subtitle in an app bar, such as a large graphic, buttons, or multiple lines of text. In these cases, you can use a collapsible app bar that starts out tall but will shrink as the user scrolls down the page until it becomes a basic app bar. This allows you the flexibility to present an eye-catching banner without permanently reducing the amount of usable space on the page. This is a pattern most commonly used for mobile applications, but could also be used for web.\n\nThe collapsible appbar should transition smoothly between the expanded and collapsed states — this means you will need to account for how the app bar will look throughout the transition. Because elements will disappear as the app bar shrinks, you'll need to use various transition techniques to do this smoothly, depending on your content.\n\n<Divider />\n\n# Search Bar\n\n<React.Fragment>\n    <ImageGrid\n        images={[Search]}\n        caption={'When the search icon is clicked, a white search bar will slide in and cover the default tool bar. '}\n    />\n    <DemoCard\n        repository={'search-bar'}\n        angular={\n            'https://stackblitz.com/github/pxblue/angular-design-patterns?file=src%2Fapp%2Fpages%2Fapp-bar%2Fsearch-bar%2Fsearch-bar.component.ts'\n        }\n        react={\n            'https://codesandbox.io/s/github/pxblue/react-design-patterns/tree/master?file=/src/pages/app-bar/search-bar/index.tsx&initialpath=search'\n        }\n        ionic\n        reactNative\n    />\n</React.Fragment>\n\nA very common pattern seen in many types of applications is the ability to search for data on a page. This is achieved by placing a search icon/button in the app bar. When this button is clicked, a white search bar slides in from the right to cover the default app bar. As the user enters text into the search field, the data is filtered in real-time. A back icon will close the Search Bar and clear the search results.\n\nIf your search is not a global-level search, you can place a smaller search input near the content being searched (e.g., a card header).\n\n<React.Fragment>\n    <ImageGrid\n        regularWidth\n        images={[MiniSearch]}\n        caption={'Use a contextual search input if your search functionality is not at the page level.'}\n    />\n</React.Fragment>\n\n## Auto-complete\n\nFor more advanced searching, you may wish to include an auto-complete feature. You can implement autocomplete by including a contextual menu below the search bar with suggested search items. Alternatively, you can use type-ahead to automatically update the recommended search query in the search field as the user types (Google search does this).\n\n<React.Fragment>\n    <ImageGrid\n        regularWidth\n        images={[AutoVariants]}\n        caption={[\n            '1. Search suggestions are provided in a dropdown menu.',\n            '2. The most likely search is shown in the search field as the user types.',\n        ]}\n    />\n    <Divider />\n</React.Fragment>\n\n# Design Specifications\n\n## Mobile\n\n<ImageGrid images={[Specs1Image, Specs3Image]} regularWidth />\n\n## Desktop and Tablet\n\nIf certain dimensions are not specified, refer to the dimensions suggested in the mobile section above.\n\n<ImageGrid images={[Specs4Image]} regularWidth />\n<MaterialDesignDescription title={'App Bars: Top'} description={`For additional instructions, refer to Material Design's design specs`} url={'https://material.io/components/app-bars-top#specs'} />\n<Divider />\n\n# Developers\n\nUse the following components to implement this pattern:\n\n**Angular** and **Ionic**:\n\n-   Angular Material\n    -   [@angular/material/toolbar](https://material.angular.io/components/toolbar)\n-   @pxblue/angular-components\n    -   [Dropdown Toolbar](https://pxblue-components.github.io/angular/?path=/info/components-dropdown-toolbar--readme)\n\n**React**:\n\n-   Material UI\n    -   [AppBar](https://material-ui.com/api/app-bar/)\n    -   [Toolbar](https://material-ui.com/api/toolbar/)\n-   @pxblue/react-components\n    -   [Dropdown Toolbar](https://pxblue-components.github.io/react/?path=/info/components-dropdown-toolbar--get-read-me-story)\n\n**React Native**:\n\n-   @pxblue/react-native-components\n    -   [Header](https://pxblue-components.github.io/react-native/?path=/info/components-documentation--header)\n"
    },
    "/patterns/empty-states": {
        "title": "Empty States",
        "text": "import { DemoCard, ImageGrid, MaterialDesignDescription, Divider } from '../../app/components';\nimport Banner from '../../app/assets/design-patterns/empty-states/empty-state-banner.svg';\nimport Image1 from '../../app/assets/design-patterns/empty-states/empty-state-variations.png';\nimport DesktopImage from '../../app/assets/design-patterns/empty-states/empty-state-desktop.png';\nimport ElementImage from '../../app/assets/design-patterns/empty-states/empty-state-element.png';\nimport Specs1Image from '../../app/assets/design-patterns/empty-states/specs-1.png';\nimport Specs2Image from '../../app/assets/design-patterns/empty-states/specs-2.png';\n\n<!-- KEYWORDS: design pattern empty state placeholder -->\n\n# Empty States\n\n<ImageGrid images={[Banner]} regularWidth />\n\nAt times, there may be areas of your application that do not have data available to display. This can happen when there is an error loading data, there are no results for a particular search or filter criteria, etc. This is where empty state indicators come into play.\n\n<React.Fragment>\n    <MaterialDesignDescription\n        title={'Empty States'}\n        url={'https://material.io/design/communication/empty-states.html'}\n    />\n    <DemoCard\n        repository={'empty-states'}\n        angular={'https://pxblue-components.github.io/angular/?path=/story/components-empty-state--with-full-config'}\n        react={'https://pxblue-components.github.io/react/?path=/story/components-empty-state--with-full-config'}\n        ionic\n        reactNative\n    />\n    <ImageGrid\n        regularWidth\n        images={[Image1]}\n        caption={[\n            '1: Mobile screen showing empty state as a functionality placeholder.',\n            '2: Desktop screen with empty state and call to action button.',\n        ]}\n    />\n    <Divider />\n</React.Fragment>\n\n# When to Use / When Not to Use\n\nYou can refer to the Material Design Empty States guidelines for general usage instructions.\n\nEmpty states can be used in a variety of ways in your application. As the name suggests, they can alert users to empty data, but they can also be used to indicate:\n\n-   No Data Available\n-   Empty Search/Filter Results\n-   Networking Errors\n-   Lack of Permissions\n-   Future Features / Placeholders\n-   Success Screens\n\nEmpty states should **NOT** be used for:\n\n-   [Loading indicators](/patterns/loading)\n-   Welcome Screens\n\n<Divider />\n\n# Anatomy\n\nEmpty states should include a large icon or graphic followed a brief headline/message. If necessary, additional explanatory text may follow.\n\nThe text on the screen should clearly indicate why there is no data to display, and what (if anything) can be done to make data available. The text should be minimal, but enough to convey the necessary message.\n\nIf the data is empty but could be populated by a user action (such as adding a device to an empty device list), there should be a call-to-action button that will allow the user to add data.\n\n## Variations\n\n<ImageGrid\n    images={[DesktopImage, ElementImage]}\n    caption={['1: A full-screen empty state.', '2: Empty state shown on an element (card).']}\n/>\n\n### Full-screen\n\nIn the most common cases, Empty States should be used full-screen as the only content on a page. In this situation, the indicator should be centered on the page. In some cases, you may wish to use a large graphic as the background of the entire page as well (such as for features that will be coming soon).\n\n### Element-level\n\nWhile less common, empty states can also be used as an indicator for individual sections of a page rather than the entire page (such as a single card having no data on a dashboard / overview screen). In these cases, it may be appropriate to use a smaller icon and text depending on the available space.\n\n<Divider />\n\n# Design Specifications\n\n<ImageGrid images={[Specs1Image, Specs2Image]} regularWidth />\n<Divider />\n\n# Developers\n\nUse the following components to implement this pattern:\n\n**Angular** and **Ionic** - @pxblue/angular-components:\n\n-   [Empty State](https://pxblue-components.github.io/angular/?path=/info/components-empty-state--readme)\n\n**React** - @pxblue/react-components:\n\n-   [Empty State](https://pxblue-components.github.io/react/?path=/info/components-empty-state--get-read-me-story)\n\n**React Native** - @pxblue/react-native-components:\n\n-   [Empty State](https://pxblue-components.github.io/react-native/?path=/info/components-documentation--empty-state)\n"
    },
    "/patterns/forms": {
        "title": "Forms and Validation",
        "text": "import { DemoCard, ImageGrid, MaterialDesignDescription, Divider } from '../../app/components';\nimport SummaryImage from '../../app/assets/design-patterns/form-validation/form-validation.svg';\nimport Image4 from '../../app/assets/design-patterns/form-validation/form-validation-password-entering.png';\nimport Image5 from '../../app/assets/design-patterns/form-validation/form-validation-password-error.png';\nimport Image6 from '../../app/assets/design-patterns/form-validation/form-validation-password-complete.png';\n\nimport LongFormImage from '../../app/assets/design-patterns/form-validation/long-form.png';\nimport OnBlurImage from '../../app/assets/design-patterns/form-validation/verify-input-on-blur.png';\nimport OnChangeImage from '../../app/assets/design-patterns/form-validation/verify-input-on-change.png';\nimport OnPageChangeImage from '../../app/assets/design-patterns/form-validation/verify-input-on-page-change.png';\nimport SubmitButtonLocationImage from '../../app/assets/design-patterns/form-validation/submit-button-location.png';\nimport NextButtonUsageImage from '../../app/assets/design-patterns/form-validation/next-button-usage.png';\nimport SubmitButtonOnChangeImage from '../../app/assets/design-patterns/form-validation/submit-button-on-change.png';\nimport SubmitButtonAutoSubmitImage from '../../app/assets/design-patterns/form-validation/submit-button-auto-submit.png';\nimport SubmitButtonOnBlurImage from '../../app/assets/design-patterns/form-validation/submit-button-on-blur.png';\nimport SubmitButtonOnClickImage from '../../app/assets/design-patterns/form-validation/submit-button-on-click.png';\nimport Specs1Image from '../../app/assets/design-patterns/form-validation/specs-1.png';\nimport Specs2Image from '../../app/assets/design-patterns/form-validation/specs-2.png';\nimport Specs3Image from '../../app/assets/design-patterns/form-validation/specs-3.png';\nimport Specs4Image from '../../app/assets/design-patterns/form-validation/specs-4.png';\nimport Specs5Image from '../../app/assets/design-patterns/form-validation/specs-5.png';\n\nimport dismissKeyboardErrorAutoscrollImage from '../../app/assets/design-patterns/form-validation/dismiss-keyboard-error-autoscroll.gif';\nimport dismissKeyboardErrorTextImage from '../../app/assets/design-patterns/form-validation/dismiss-keyboard-error-text.gif';\n\n<!-- KEYWORDS: design pattern form verification validation error -->\n\n# Forms and Validation\n\n<ImageGrid images={[SummaryImage]} regularWidth />\n\nForms are an integral part of many applications, particularly during the [user registration](/patterns/login) phase. One of the most important parts of working with forms is properly validating the information that users enter into them. In general, PX Blue follows the form behaviors explained in detail by Material Design.\n\n<React.Fragment>\n    <MaterialDesignDescription title={'Text Fields'} url={'https://material.io/components/text-fields/'} />\n    <DemoCard\n        repository={'form-validation'}\n        angular={\n            'https://stackblitz.com/github/pxblue/angular-design-patterns?file=src%2Fapp%2Fpages%2Fform-validation%2Fform-validation.component.ts'\n        }\n        react={\n            'https://codesandbox.io/s/github/pxblue/react-design-patterns/tree/master?file=/src/pages/form-validation/index.tsx&initialpath=form-validation'\n        }\n    />\n    <Divider />\n</React.Fragment>\n\n# Anatomy\n\n## Form Layout\n\nKeep your forms short where possible, but make effective use of whitespace to avoid overwhelming your users. If your forms are larger than the height of your target device, consider breaking them into sections or multiple pages to improve the user experience.\n\n<ImageGrid\n    images={[LongFormImage]}\n    regularWidth\n    caption={\n        'You can either split the forms into sections with dividers (#1) or into multiple pages with steppers (#2), or a combination of both.'\n    }\n/>\n\n<!--\n## Input Controls\n\nWhen using multiple input controls, such as text fields, radio buttons, checkboxes, try to keep all of your inputs in a single column to preserve the sense of a linear progression. Inputs should be approximately as wide as their expected input values (or full width on mobile). Follow the Material Design [guidelines](https://material.io/components/selection-controls#specs) for when to use different selection controls.\n -->\n\n## Field Requirements\n\nRequired / optional fields should be identified according to the Material Design guidelines. If your form fields have complex requirements for valid values, you can list these criteria below the input. A common use case for this is when displaying password complexity requirements.\n\n<ImageGrid images={[Image4, Image5, Image6]} caption={'A common application of form validation — reset password.'} />\n\n## Error Messages\n\nIf there is an error with the data entered into a field, the field should indicate to the user that there is a problem. Label and helper text should be changed to a red color and the error message should be displayed in the helper text location below the field — any existing helper text should be replaced with the error message. You may optionally show an additional error icon in the text input.\n\nError messages should be succinct and should not provide information that could compromise security (e.g., use \"Invalid Credentials\" instead of \"Incorrect Password\").\n\n## Success Screens\n\nOnce a user has reached the end of a form successfully, you should present them with a success screen. This screen should indicate to the user that their submission was accepted and offer information about the next steps (e.g., \"Click the finish button below to log in.\"). Typically these success screens are stylized for your application and will include some bold graphics or [illustrations](/style/illustrations).\n\n## Mobile Keyboard\n\nMobile devices offer multiple different software keyboard variations for different types of inputs. Make sure that you are using the appropriate keyboard for your inputs (e.g., use the email keyboard for email inputs, phone number keyboard for a phone number field, etc.).\n\nTypically, mobile devices also allow you to change the label on the return key of the software keyboard. This label should be appropriate to the context (see [Submitting the Form](/patterns/forms#submitting-the-form) below).\n\nThe focused input field should remain centered in the screen when the software keyboard is open — it should not be hidden behind the keyboard.\n\n## Password Visibility\n\nDepending on the security requirements of your application, it may be useful to add a password visibility toggle button to fields where users must enter a password (such as during login or changing a password). The visibility toggle switches the input type between hidden text and plain text so users can ensure that they typed their password correctly.\n\n<Divider />\n\n# Behaviors\n\n## Verifying User Input\n\nIn general, there are three acceptable times to perform form field verification:\n\n-   on blur: the field is verified when the user clicks away from it\n-   on change: the field is dynamically verified on each keystroke or change in the value\n-   on action: fields are verified after performing a specific action, such as clicking a button\n\n### Verifying on Blur\n\nIn order to avoid distracting or confusing users, most text fields should verify input when the field loses focus. Error messages should not appear until the user is finished entering data and the field is no longer in focus.\n\n<ImageGrid\n    images={[OnBlurImage]}\n    regularWidth\n    caption={[\n        '1: Do not check for validity or display error messages when the user is typing in the field.',\n        '2: The user is finished and the input has lost focus (i.e., \"blurred\"). Now the input should be verified.',\n    ]}\n/>\n\n### Verifying on Change\n\nSome fields should verify the user input as it changes. The most common case for this type of verification is a new password field or a confirm password field. The verification feedback should be displayed / updated each time the user makes a change to the input field.\n\n<ImageGrid\n    images={[OnChangeImage]}\n    regularWidth\n    caption={[\n        '1: The password criteria checks shall be updated as the user changes their input.',\n        '2: “Confirm Password” field should check for a match with password to give immediate feedback for when the user can proceed.',\n    ]}\n/>\n\n### Verifying on Action\n\nIn some specific situations, you may need to defer verification or perform it for all fields in a form at once. In this case, you need to link verification to a specific action, such as clicking a button.\n\nThis type of verification is common when the checks cannot be performed on the client, such as making an API call to verify a registration code, check user login credentials, or search for a device on the network. In most cases, you can do some preliminary checks using one of the two methods above (e.g., you can check if the email is a valid email before making the API call to verify the credentials).\n\nIf verification is being triggered by clicking on a button, you should replace the button text with a loading spinner while the verification is in progress. If the verification is successful, the user should be automatically taken to the next screen.\n\n<ImageGrid\n    images={[OnPageChangeImage]}\n    regularWidth\n    caption={[\n        'After the user clicks the submit button, the app waits for the server response, and displays an error message.',\n        '1: The helper text will be replaced by the error message. ',\n        '2: Use a circular progress indicator when waiting for responses from the server.',\n    ]}\n/>\n\n## Submitting the Form\n\nForms should have a button to submit the data or continue to the next part of the form if there are multiple parts. Depending on what happens next, the button should be labeled _Next_, _Finish_, or similar. The button should be located at the bottom right corner of the form (bottom left for right-to-left languages).\n\n<ImageGrid\n    images={[SubmitButtonLocationImage]}\n    regularWidth\n    caption={[\n        '1: On desktops, the button is placed in the bottom corner of the form.',\n        '2: On mobile, the software keyboard has different options for the action button',\n    ]}\n/>\n\nOn mobile, if there are multiple input fields on the screen, the keyboard action button should say \"next\", unless you are on the last item of the page, in which case the keyboard button should say \"done\" or \"submit\". This button can either submit the form or simply dismiss the keyboard (if you want users to have a chance to review their information first).\n\n<ImageGrid\n    images={[NextButtonUsageImage]}\n    regularWidth\n    caption={[\n        ,\n        '1: The user entered a valid input. Clicking \"next\" will auto-focus the user to the next text field.',\n        '2: The user entered an invalid input. Clicking \"next\" will display the error message but will not auto-focus to the next text field.',\n    ]}\n/>\n\nFor screens where there is a single field with a known required length (e.g., a verification code), the submit button can be omitted and the form submitted as soon as the required length is reached.\n\n<!-- TODO: A gif might handle the task better here -->\n\n<ImageGrid\n    images={[SubmitButtonAutoSubmitImage]}\n    regularWidth\n    caption={\n        'For the verification code screen, you can auto-submit the information once the user input reaches the required length (#2). After the verification code is recognized (#3), the screen pauses for a short moment before automatically moving to the next screen.'\n    }\n/>\n\n### Disabling the Submit Button\n\nIf there are errors indicated on any of the form fields, the submit button should be disabled. If you are performing verification when clicking the submit button (onAction), all the invalid fields should be indicated if they aren't already.\n\n<React.Fragment>\n    {/* <ImageGrid\n        images={[SubmitButtonOnChangeImage]}\n        regularWidth\n        caption={\n            'When your input field field is verified on change, disable the submit button until the user enters a valid input.'\n        }\n    /> */}\n    <ImageGrid\n        images={[SubmitButtonOnBlurImage]}\n        regularWidth\n        caption={'The submit button is disabled until the user has entered something for all the required fields.'}\n    />\n    <ImageGrid\n        images={[dismissKeyboardErrorAutoscrollImage, dismissKeyboardErrorTextImage]}\n        caption={[\n            '1: The UI should auto-scroll to and focus on the first invalid field.',\n            '2: On login screens, form fields should not shift when errors appear.',\n        ]}\n    />\n</React.Fragment>\n<Divider />\n\n# Design Specifications\n\nFor additional instructions, refer to Material Design's [specifications](https://material.io/components/text-fields#specs) for \"Text fields\".\n\n## Mobile\n\n<ImageGrid images={[Specs1Image, Specs2Image, Specs3Image]} regularWidth />\n\n## Desktop and Tablet\n\nIf certain dimensions are not specified, refer to the dimensions suggested in the mobile section above.\n\n<ImageGrid images={[Specs4Image, Specs5Image]} regularWidth />\n<Divider />\n\n# Developers\n\nUse the following components to implement this pattern:\n\n**Angular** — Angular Material\n\n-   [Form Field](https://material.angular.io/components/form-field/overview)\n-   [Input](https://material.angular.io/components/input/overview)\n\n**React** — Material-UI\n\n-   [Text Field](https://material-ui.com/components/text-fields/#text-field)\n\n**React Native** — React-Native-Paper\n\n-   [TextInput](https://callstack.github.io/react-native-paper/text-input.html)\n"
    },
    "/patterns/internationalization": {
        "title": "Internationalization",
        "text": "import { DemoCard, ImageGrid, MaterialDesignDescription, Divider } from '../../app/components';\nimport { Link as LinkIcon } from '@material-ui/icons';\nimport InternationalizationImage from '../../app/assets/design-patterns/internationalization/internationalization.svg';\nimport IconsFlippedImage from '../../app/assets/design-patterns/internationalization/icons-flipped.png';\nimport UIFlippedImage from '../../app/assets/design-patterns/internationalization/ui-flipped.png';\nimport ButtonWidthImage from '../../app/assets/design-patterns/internationalization/button-width.png';\nimport TextFieldWidthImage from '../../app/assets/design-patterns/internationalization/text-field-width.png';\nimport LanguageOptionsImage from '../../app/assets/design-patterns/internationalization/language-options.png';\nimport CulturalDifferencesImage from '../../app/assets/design-patterns/internationalization/cultural-differences.svg';\n\n<!-- KEYWORDS: design pattern internationalization i18n internationalisation language translate translation localization l10n rtl localisation globalization globalize -->\n\n# Internationalization & Localization\n\n<ImageGrid images={[InternationalizationImage]} regularWidth />\n<DemoCard\nrepository={'internationalization'}\nangular={\n'https://stackblitz.com/github/pxblue/angular-design-patterns?file=src%2Fapp%2Fpages%2Fi18n%2Fi18n.component.ts'\n}\nreact={\n'https://codesandbox.io/s/github/pxblue/react-design-patterns/tree/master?file=/src/pages/i18n/index.tsx&initialpath=i18n'\n}\n/>\n\nInternationalization and localization refer to a set of practices for adapting applications to different regions, languages, and cultures. You can accomplish this in your applications or websites by considering the differences in language, scripts, and directionality.\n\nInternationalization, sometimes abbreviated as \"I18N,\" refers to the process of designing products that are functionally independent of interfaces or interactions that rely on a specific language or cultural context. This process enables products or services to be equally experienced by people using any language or from any cultural background. Localization, sometimes written as \"L10N,\" concerns adapting or customizing a product to some specific areas. Internationalization and localization are both crucial in making your application prosper in a global market.\n\nYou should always consider Internationalization during the design process, especially if there is a vision for reaching our Global market. Understanding and capturing possible needs for localization should begin at the outset of any new product development, even if the short-term goal is focused on only one market.\n\n<Divider />\n\n# Changing Locales\n\n<MaterialDesignDescription\n    title={'Language Support'}\n    url={'https://material.io/design/typography/language-support.html#language-considerations'}\n/>\n\n## Translation\n\nTo localize your application content, you should create a string resource file or object that contains the translations for any display text used in your application. Do not have any text hard-coded in your application's UI. To switch your application to another language, you simply toggle the file/object used to populate the UI to the appropriate translation.\n\n## Showing Language Options\n\n<ImageGrid images={[LanguageOptionsImage]} regularWidth />\n\nLanguage options are typically presented in the user preferences or settings section of an application. In the case where users do not require an account, such as on a public-facing website, the language option is expected in the app bar or in the footer. You should provide cues, such as an icon, to help users locate the language selection.\n\nWhen showing a list of languages, the language names should be presented in their own language (i.e., use \"Español\", not \"Spanish\").\n\n## Converting Units, Currencies, and Formats\n\nUnits, currency, and date / time formats are usually linked with a particular locale. However, there can be differences in usage even within a single locale. You should provide users with the option to change these values (if appropriate for your application) in their locale settings.\n\n## Checking for Layout\n\n<ImageGrid\n    images={[ButtonWidthImage, TextFieldWidthImage]}\n    caption={[\n        '1: Buttons with different width.',\n        '2: Error message in English.',\n        '3: Same error message in Malayalam can result in line wrapping.',\n    ]}\n/>\n\nDifferent languages or writing systems may require different vertical and horizontal space. To ensure flexibility, avoid using fixed dimensions for UI components such as buttons, labels, and badges. Also, consider setting different default display font sizes for languages that may have smaller glyphs.\n\n> **NOTE:** PX Blue recommends using [Noto Sans](https://www.google.com/get/noto/#sans-lgc) for all non-western languages. You can read more on our [Typography](/style/typography) page.\n\n## Bidirectionality / Right-to-Left (RTL) Support\n\n<MaterialDesignDescription\n    title={'Bidirectionality'}\n    description={'Learn about mirroring layout, mirroring elements, and localization.'}\n    url={'https://material.io/design/usability/bidirectionality.html'}\n/>\n\nSome languages, such as Arabic and Hebrew, are read from right to left. Applications supporting these languages will need to mirror the UI so the natural flow is from right to left. For example, navigation drawers should be displayed on the right side of the screen, icons should be to the right of the text in buttons, and [any icons with directionality](https://material.io/design/usability/bidirectionality.html#mirroring-elements) should be mirrored.\n\n<ImageGrid\n    images={[UIFlippedImage]}\n    regularWidth\n    caption={[\n        '1: A PX Blue user interface in right-to-left language (English).',\n        '2: The same PX Blue user interface in left-to-right language (Arabic).',\n    ]}\n/>\n<ImageGrid\n    images={[IconsFlippedImage]}\n    regularWidth\n    caption={[\n        '1: Icons that indicate directions should be mirrored.',\n        '2: Icons with glyphs and symbols should never be mirrored.',\n    ]}\n/>\n\n## Cultural Differences\n\n<ImageGrid images={[CulturalDifferencesImage]} regularWidth />\n\nAddressing cultural differences is the key concern of localization. Sometimes certain UI elements convey different meaning in different cultures. For example, in America, the red color in the stock market indicates a decline, while in China the same color indicates a rise. A thumbs-up gesture usually expresses an approval in English-speaking country, yet the gesture can have a negative meaning in Iraq. When designing for a new market, you are encouraged to have a local consultant run an audit for your application.\n\nWhen you are designing for webpages, instead of applications, your primary goal is to advertise your products and services, and appeal to the local market. The language tone, page style, and choice of image assets are expected to be tailored for different targeted culture. Likewise, your user study and market research conclusions derived under a certain cultural background might not apply to another culture.\n\n<React.Fragment>\n    <MaterialDesignDescription\n        title={'Design Localization and the New Web'}\n        description={'An examination of localization in web design by Bitmatica Lab.'}\n        url={`https://medium.com/bitmatica-lab/design-localization-and-the-new-web-f54f43c5f040`}\n        avatar={<LinkIcon style={{ width: 48, height: 48 }} />}\n    />\n    <MaterialDesignDescription\n        title={'Localization'}\n        url={`https://developer.apple.com/localization/`}\n        description={`Apple's suggestions on designing for an international market.`}\n        avatar={<LinkIcon style={{ width: 48, height: 48 }} />}\n    />\n    <MaterialDesignDescription\n        title={'Localization - Market Finder'}\n        description={'Introduction to localization by Google Market Finder.'}\n        url={`https://marketfinder.thinkwithgoogle.com/intl/en_us/topic/localisation/`}\n        avatar={<LinkIcon style={{ width: 48, height: 48 }} />}\n    />\n    <Divider />\n</React.Fragment>\n\n# Developers\n\nThere are a number of available libraries to assist with implementing internationalization in your applications.\n\n## Angular and Ionic\n\nFor projects that need the ability to swap between languages, we recommend using [ngx-translate](https://github.com/ngx-translate/core). As an alternative, the Angular framework has a powerful built-in [i18n tool](https://angular.io/guide/i18n) available, but it requires a separate web app be built for each supported language (e.g. an English version, a Spanish version, etc). This is ideal for larger projects that don't require in-app language switching and don't support more than a few locales.\n\n## React\n\nThere are many JS libraries available to help internationalize your applications. We recommend using [react-i18next](https://github.com/i18next/react-i18next) to manage your translations. If you are supporting right-to-left languages, you should also carefully follow the guide from [Material-UI](https://material-ui.com/guides/right-to-left).\n\n## React Native\n\nAs with React for web, we recommend using [react-i18next](https://github.com/i18next/react-i18next) to manage your translations. If you are supporting right-to-left languages, you can make use of the [I18nManager](https://reactnative.dev/blog/2016/08/19/right-to-left-support-for-react-native-apps) from React Native.\n"
    },
    "/patterns/lists": {
        "title": "Lists",
        "text": "import { DemoCard, ImageGrid, MaterialDesignDescription } from '../../app/components';\nimport Image1 from '../../app/assets/design-patterns/data-list/simple-list.png';\nimport Image2 from '../../app/assets/design-patterns/status-list/status-list.png';\nimport Image3 from '../../app/assets/design-patterns/action-list/action-list.png';\nimport Image4 from '../../app/assets/design-patterns/action-list/action-list-overlay.png';\nimport Image5 from '../../app/assets/design-patterns/action-list/action-list-item-action.png';\nimport Image6 from '../../app/assets/design-patterns/multiselect-list/multiselect-list.png';\nimport Image7 from '../../app/assets/design-patterns/sortable-list/sortable-list.png';\nimport Image8 from '../../app/assets/design-patterns/sortable-list/sortable-list-sorted.png';\n\n<!-- KEYWORDS: design pattern list status sort table drag drop action -->\n\n# List Patterns\n\nLists are frequently used throughout PX Blue applications. Typically, lists are used to represent groups of similar data. They can be used to show simple name-value pairs in a sidebar all the way to complex timelines or device lists.\n\n<MaterialDesignDescription title={'Lists'} url={'https://material.io/components/lists/'} />\n\n## Basic Lists\n\n<ImageGrid images={[Image1, Image2]} />\n<DemoCard repository={'data-list'} angular={'https://stackblitz.com/github/pxblue/angular-design-patterns?file=src%2Fapp%2Fpages%2Flist%2Fdata-list%2Fdata-list.component.ts'} react={'https://codesandbox.io/s/github/pxblue/react-design-patterns/tree/master?file=/src/pages/lists/data-list/index.tsx&initialpath=data-list'} ionic reactNative />\n<DemoCard repository={'status-list'} angular={'https://stackblitz.com/github/pxblue/angular-design-patterns?file=src%2Fapp%2Fpages%2Flist%2Fstatus-list%2Fstatus-list.component.ts'} react={'https://codesandbox.io/s/github/pxblue/react-design-patterns/tree/master?file=/src/pages/lists/status-list/index.tsx&initialpath=status-list'} ionic reactNative/>\n\nThe simplest type of list simply presents a single line (or multiple lines) of text for each element in the collection.\n\nCommonly in PX Blue applications, list items also show some visual indication of the item's current status (such as online, offline, or an error condition). This is achieved by using status/type icons (avatars) and sometimes a colored left (inset) border.\n\n## Lists with Actions\n\n<ImageGrid images={[Image3, Image4, Image5]} />\n<DemoCard repository={'action-list'} angular={'https://stackblitz.com/github/pxblue/angular-design-patterns?file=src%2Fapp%2Fpages%2Flist%2Faction-list%2Faction-list.component.ts'} react={'https://codesandbox.io/s/github/pxblue/react-design-patterns/tree/master?file=/src/pages/lists/action-list/index.tsx&initialpath=action-list'} ionic reactNative />\n\nIf there are actions that you would like to perform on individual list items, these can be included via icons or a 3-dot action menu (multiple actions) on each list item. Depending on the space available, you typically will want to use the action menu if you have more than three actions that can be taken. Global actions that affect the whole list (such as Add or Clear) should be placed in the list header.\n\n## Actions on Selected Items\n\n<ImageGrid images={[Image6]} />\n<DemoCard repository={'multiselect-list'} angular={'https://stackblitz.com/github/pxblue/angular-design-patterns?file=src%2Fapp%2Fpages%2Flist%2Fmultiselect-list%2Fmultiselect-list.component.ts'} react={'https://codesandbox.io/s/github/pxblue/react-design-patterns/tree/master?file=/src/pages/lists/multiselect-list/index.tsx&initialpath=multiselect-list'} ionic reactNative />\n\nYou may want to take action on several list items at once, but not all. These should be presented in a persistent snackbar (similar to a [bottom sheet](/patterns/overlay)) after selecting items. Selection can be handled in several ways, the simplest of which is to include a checkbox for each list item.\n\n## Drag and Drop\n\n<ImageGrid images={[Image7, Image8]} />\n<DemoCard repository={'sortable-list'} angular={'https://stackblitz.com/github/pxblue/angular-design-patterns?file=src%2Fapp%2Fpages%2Flist%2Fsortable-list%2Fsortable-list.component.ts'} react={'https://codesandbox.io/s/github/pxblue/react-design-patterns/tree/master?file=/src/pages/lists/sortable-list/index.tsx&initialpath=sortable-list'} ionic reactNative />\n\nOccasionally, you may want users to be able to re-order the items in a list manually. This should be accomplished by placing a drag handle as the leftmost element in the row. The ability to re-order the list should be locked behind an Edit Mode toggle mechanism.\n\n> In Angular, the CDK (Component Developer's Kit) greater than 7.0 is required to use this feature. CDK 7.0.0-beta works in the following example with Angular Material ^6.0.0.\n\n## Tables\n\n<DemoCard\n    repository={'responsive-table'}\n    angular={\n        'https://stackblitz.com/github/pxblue/angular-design-patterns?file=src%2Fapp%2Fpages%2Flist%2Fresponsive-table%2Fresponsive-table.component.ts'\n    }\n    react={\n        'https://codesandbox.io/s/github/pxblue/react-design-patterns/tree/master?file=/src/pages/lists/responsive-table/index.tsx&initialpath=responsive-table'\n    }\n/>\n\nTables are similar to lists but are slightly more structured by ordering data for a list item into columns. These work well on larger screens, but at a mobile size, they should collapse into a list for better formatting.\n\n<MaterialDesignDescription title={'Data Tables'} url={'https://material.io/components/data-tables/'} />\n"
    },
    "/patterns/loading": {
        "title": "Loading & Waiting",
        "text": "import { DemoCard, ImageGrid, MaterialDesignDescription, Divider } from '../../app/components';\nimport LoadingBanner from '../../app/assets/design-patterns/loading-states/loading-banner.svg';\nimport LoadingMobile from '../../app/assets/design-patterns/loading-states/mobile-loading-state.png';\nimport LoadedModal from '../../app/assets/design-patterns/loading-states/mobile-loaded-state.png';\nimport DesktopLoading from '../../app/assets/design-patterns/loading-states/desktop-loading.gif';\nimport OverlaySpinner from '../../app/assets/design-patterns/loading-states/overlay-spinner.png';\nimport InlineSpinner from '../../app/assets/design-patterns/form-validation/verify-input-on-page-change.png';\nimport MiniSpinner from '../../app/assets/design-patterns/loading-states/mini-spinner.png';\nimport Specs from '../../app/assets/design-patterns/loading-states/specs-1.png';\n\n<!-- KEYWORDS: design pattern loading asynchronous api refresh -->\n\n# Loading & Waiting\n\n<ImageGrid images={[LoadingBanner]} regularWidth />\n\nOften times, your application will need to load data from (or send data to) a remote location with some amount of latency. When this happens, you will need to provide some indication to the user that something is happening. Different situations may call for different styles of indicator, explained below.\n\n<React.Fragment>\n    <MaterialDesignDescription\n        title={'Progress Indicators'}\n        url={'https://material.io/components/progress-indicators'}\n    />\n    <Divider />\n</React.Fragment>\n\n# Variations\n\nThere are a number of different ways to indicate to a user that something is happening / loading behind the scenes. Different variations are appropriate in different situations.\n\n## Placeholder Shapes\n\nWhen loading data for the first time, you do not want to show an empty screen while you are fetching the data. Instead, you should show placeholders that mimic (using simple shapes) the data that will eventually be loaded. This will give the impression that your application is faster and gives users an indication of what kind of data is being loaded.\n\nThe placeholder should match as closely as possible the real structure of the data. For example, if you are loading a list where each item has an icon, two lines of text, and an action button, then your placeholder should have a circle, two rectangles for the text, and another rectangle for the button. You should show as many placeholder elements as necessary to fill the area in the application that is loading data. You will want to apply an animation on the placeholder shapes to give a sense of progress.\n\n<React.Fragment>\n    <ImageGrid\n        images={[LoadingMobile, LoadedModal]}\n        caption={'When data is loading, use placeholder shapes for where the data will appear.'}\n    />\n    <ImageGrid\n        regularWidth\n        images={[DesktopLoading]}\n        caption={'Show a transition on the placeholder shapes to indicate progress.'}\n    />\n    <DemoCard\n        repository={'loading-states'}\n        angular={\n            'https://stackblitz.com/github/pxblue/angular-design-patterns?file=src%2Fapp%2Fpages%2Floading-states%2Floading-states.component.ts'\n        }\n        react={\n            'https://codesandbox.io/s/github/pxblue/react-design-patterns/tree/master?file=/src/pages/loading-states/index.tsx&initialpath=loading-states'\n        }\n        ionic\n        reactNative\n    />\n</React.Fragment>\n\n## Spinner Overlays\n\nSpinner overlays make use of a semi-transparent overlay with a large, centered spinner. This variation of indicator is useful when you want to block user interaction with the screen (or a section of the screen) while processing occurs.\n\n<ImageGrid\n    regularWidth\n    images={[OverlaySpinner]}\n    caption={['1: Use of overlay spinner when loading EULA.', '2. Remove the overlay once the data is loaded.']}\n/>\n\n## Contextual Spinners\n\nContextual spinners can be used as an alternative to spinner overlays in certain situations. The most common application of contextual spinners is during [Form](/patterns/forms) submission / verification. If you need to wait for a server response to validate inputs in a form (after clicking the submit button), you should disable the submit button and replace its label with a spinner. If the verification succeeds, the application should proceed to the next screen. If verification fails, the appropriate error messages should be displayed and the submit button label restored.\n\n<ImageGrid\n    images={[InlineSpinner]}\n    regularWidth\n    caption={[\n        'After the user clicks the submit button, the app waits for the server response, and displays an error message.',\n        '1: The helper text will be replaced by the error message. ',\n        '2: Use a circular progress indicator when waiting for responses from the server.',\n    ]}\n/>\n\n## Progress Bars\n\nProgress bars should be used sparingly in your application. They should only be used in situations where progress is discrete / measurable. For example, it could be used to indicate progress when uploading a file to a server.\n\n<Divider />\n\n# Behavior\n\n## Real-time Data (Polling / Pub-Sub)\n\nIf you are showing real-time data (either via polling or a push mechanism from the server), there is no need to show loading indicators. If you wish, you can display a small indicator when data is being refreshed or mention somewhere on the screen when the data was last refreshed so users can identify if the data is stale. You should avoid showing a loading indicator if your data is refreshed more than once per minute.\n\n<ImageGrid\n    regularWidth\n    images={[MiniSpinner]}\n    caption={'You can place a small loading icon in the header when data is updating.'}\n/>\n\n## Manual Refresh\n\nIf your users can manually refresh data on the screen, you may wish to show the placeholder elements (as with initial load), or simply refresh the data behind the scenes without indication (as with real-time). Ultimately, this should depend on how long it takes to refresh the data - if it takes more than one second to load the data, you should use an indicator.\n\n<Divider />\n\n# Design Specifications\n\nContext plays an important role in sizing your indicators. If you are using them in a small container, you may need to scale down from the recommended size.\n\n<React.Fragment>\n    <ImageGrid\n        regularWidth\n        images={[Specs]}\n        caption={[\n            '1. Overlay spinners should default to size 96.',\n            '2. Contextual button spinners should use size 12.',\n        ]}\n    />\n    <Divider />\n</React.Fragment>\n\n# Developers\n\n## Placeholder Shapes\n\nThere are a number of libraries available to help you create placeholder shapes, such as:\n\n-   [@netbasal/ngx-content-loader](https://www.npmjs.com/package/@netbasal/ngx-content-loader) (Angular, Ionic)\n-   [ion-skeleton-text](https://ionicframework.com/docs/api/skeleton-text) (Ionic)\n-   [placeholder-loading](https://www.npmjs.com/package/placeholder-loading) (React, Angular, Ionic)\n-   [react-content-loader](https://www.npmjs.com/package/react-content-loader) (React)\n-   [rn-placeholder](https://www.npmjs.com/package/rn-placeholder) (React Native)\n\n## Progress Indicators\n\nAdditionally, you should use the following progress / spinner components:\n\n**Angular** and **Ionic** - Angular Material:\n\n-   [Progress Spinner](https://material.angular.io/components/progress-spinner/overview)\n-   [Progress Bar](https://material.angular.io/components/progress-bar/overview)\n\n**React** - Material UI:\n\n-   [Circular Progress](https://material-ui.com/components/progress/#circular)\n-   [Linear Progress](https://material-ui.com/components/progress/#linear)\n\n**React Native** - React Native Paper:\n\n-   [Activity Indicator](https://callstack.github.io/react-native-paper/activity-indicator.html)\n-   [Progress Bar](https://callstack.github.io/react-native-paper/progress-bar.html)\n"
    },
    "/patterns/login": {
        "title": "Login",
        "text": "import { DemoCard, ImageGrid } from '../../app/components';\n\nimport LoginInactiveImage from '../../app/assets/design-patterns/login/login-inactive.png';\nimport LoginViewPasswordImage from '../../app/assets/design-patterns/login/login-view-password.png';\nimport LoginErrorImage from '../../app/assets/design-patterns/login/login-error.png';\n\nimport ForgetPasswordEnterEmailImage from '../../app/assets/design-patterns/login/forget-password-enter-email.png';\nimport ForgetPasswordEmailSentImage from '../../app/assets/design-patterns/login/forget-password-email-sent.png';\n\nimport RegistrationVerifyEmail from '../../app/assets/design-patterns/login/registration-verify-email.png';\nimport RegistrationAccountDetails from '../../app/assets/design-patterns/login/registration-account-details.png';\n\n<!-- KEYWORDS: design pattern login registration register -->\n\n# Login Patterns\n\nMost applications will require some form of login to ensure that only authorized users have access. The most basic login is with a simple username and password.\n\n<!-- @TODO switch login links over to the \"Component Recommendations style\" instead of a \"Interactive Code example\" once we have one designed. -->\n\n<DemoCard repository={'login'} angular react ionic reactNative />\n\n## Basic Form\n\n<ImageGrid\n    images={[LoginInactiveImage, LoginViewPasswordImage, LoginErrorImage]}\n    caption={\n        'During the login process, the input field can be inactive, displaying a visible password, or showing error messages.'\n    }\n/>\n\nA simple login presents fields for the users to enter their credentials and a button to submit them for verification.\n\n## Login Feedback\n\nAfter a user submits their credentials, there are three possible results:\n\n-   If authentication is successful, the user is directed to the application landing page.\n-   If authentication fails, the user remains on the login page and the screen should be updated to show an appropriate error message (e.g., Invalid Credentials).\n-   If an error occurs when attempting to validate the credentials (e.g., Server Unavailable), the user should be notified with an appropriate error message.\n\n> **NOTE:** be very careful when presenting error messages to users. For security, you should not present more information than is necessary (e.g., do **NOT** provide messages like \"User does not exist,\" \"Incorrect Password,\" etc.).\n\n## Forgot Password\n\n<ImageGrid images={[ForgetPasswordEnterEmailImage, ForgetPasswordEmailSentImage]} />\n\nThe login screen for an application should also present users with a way to recover or reset their password if they have lost or forgotten it. This is typically presented as a hyperlink below the credential fields. Clicking the link will present users with a field to enter their e-mail address. They will receive an email with a hyperlink to reset their password.\n\n## User Registration\n\n<ImageGrid images={[RegistrationVerifyEmail, RegistrationAccountDetails]} />\n\nThe login screen should also present new users of the application with a way to sign up for an account. This is also typically presented as a hyperlink below the credential fields that would link to a registration workflow (see below).\n\n#### Registration Workflow\n\nTo register for an account, a new user must supply their e-mail address. After entering their e-mail address, a confirmation code is sent to verify the address.\n\nAfter the email address is verified, users can continue the registration process by choosing a password. You should display password requirements (if any) near this field.\n\n> **NOTE:** The minimum requirements for registration are an email address, confirmation code, and password. You can also collect additional parameters as necessary for your application (e.g., Name, Phone Number, etc.).\n\n# Developer\n\nPX Blue has an npm package ([@pxblue/react-native-auth-workflow](https://www.npmjs.com/package/@pxblue/react-native-auth-workflow)) for React Native. It includes pre-built implementations of the screens for Login, Forgot Password, Contact Information, Self-Registration, Registration By Invitation, and Change Password.\n"
    },
    "/patterns/navigation": {
        "title": "Navigation",
        "text": "import { DemoCard, ImageGrid, MaterialDesignDescription } from '../../app/components';\nimport PermanentImg from '../../app/assets/design-patterns/navigation/navigation-permanent.png';\nimport TemporaryImg from '../../app/assets/design-patterns/navigation/navigation-temporary.png';\nimport PersistentImg from '../../app/assets/design-patterns/navigation/navigation-persistent.png';\n\n<!-- KEYWORDS: design pattern navigation drawer menu -->\n\n# Navigation Patterns\n\nNavigation is the way in which users access the different areas of your application. This is typically accomplished through a side drawer navigation panel with a list of links to the various pages in your application.\n\n<MaterialDesignDescription\n    title={'Understanding Navigation'}\n    url={'https://material.io/design/navigation/understanding-navigation.html#types-of-navigation'}\n    description={`Read about Material Design's navigation fundamentals.`}\n/>\n<MaterialDesignDescription\n    title={'Navigation Drawer '}\n    url={'https://material.io/components/navigation-drawer/'}\n    style={{marginRight: 0}}\n/>\n\n## Fixed Navigation\n\nThe most basic navigation panel is fixed in place and always visible on the left side of the application. Note: a fixed navigation panel is not suitable when going to smaller resolutions or mobile devices.\n\n## Collapsible Navigation\n\nA more common implementation of the navigation panel is a collapsible panel that can be opened and closed via the menu icon in the top left corner of the application. This implementation can have two different variations: content-resize or content-cover.\n\n### Content-Resize / Content-Push\n\n<ImageGrid images={[PermanentImg]} />\n\nThe content-resize implementation does not cover any of the main application content. Rather, the navigation panel slides in and the main application container resizes to accommodate (the navigation panel and main panel are side by side instead of one on top of the other).\n\n### Content-Cover\n\n<ImageGrid images={[TemporaryImg]} />\n\n<!-- @TODO switch side-navigation links over to the \"Component Recommendations style\" instead of a \"Interactive Code example\" once we have one designed. -->\n\n<DemoCard\n    repository={'side-navigation'}\n    angular={'https://pxblue-components.github.io/angular/?path=/story/components-drawer--with-full-config'}\n    react\n/>\n\nIn this implementation, the navigation panel slides out from the side, partially obscuring the main content of the application. It is often implemented with a dark overlay that blocks the main application and directs the user's focus to the navigation panel that was opened.\n\n## Icon Navigation Bar / Responsive Navigation\n\n<ImageGrid\n    images={[PersistentImg, PermanentImg]}\n    caption={\n        'When the user hovers on the Navigation Rail, the side navigation will expand temporarily, revealing the text details of each navigation item; when the user moves their cursor away, the whole side navigation panel collapses.'\n    }\n/>\n\n<!-- @TODO switch icon-navigation links over to the \"Component Recommendations style\" instead of a \"Interactive Code example\" once we have one designed. -->\n\n<DemoCard\n    repository={'icon-navigation'}\n    angular={'https://pxblue-components.github.io/angular/?path=/story/components-drawer--within-a-drawer-layout'}\n    react={'https://pxblue-components.github.io/react/?path=/story/components-drawer--in-drawer-layout'}\n/>\n\nThe icon navigation bar (a.k.a. \"[navigation rail](https://material.io/components/navigation-rail/#anatomy)\" on Material.io) is a minimalist approach to the navigation panel. It features a single icon to represent each of the main areas of the application. This navigation panel is typically used on larger screens only, and is expandable to a full side navigation panel on hover or when clicking the menu icon.\n\nThese may be used in conjunction with Bottom Tab navigation - on larger resolution displays, bottom tabs would become elements in the side navigation.\n"
    },
    "/patterns/overlay": {
        "title": "Overlays",
        "text": "import { DemoCard, ImageGrid, MaterialDesignDescription, Divider } from '../../app/components';\nimport BasicBottomsheet from '../../app/assets/design-patterns/action-list/action-list-overlay.png';\nimport ComplexBottomsheet from '../../app/assets/design-patterns/bottom-sheet/complex-bottomsheet.png';\n\n<!-- KEYWORDS: design pattern overlay modal sidebar popup dialog side sheet -->\n\n# Overlays\n\nOverlays are useful in a variety of situations when you need to provide more context or information to a user than can be found in your primary content. For example, they can be used to present a confirmation dialog, details about a selected item, or actions that can be taken on a page. These can be used for presenting information (such as with a dialog) or capturing it (such as in a form).\n\n<Divider />\n\n# Variations\n\nOverlay elements come in a variety of shapes and sizes depending on their purpose and can be either blocking (i.e., the user must interact with the overlay before they can do anything else) or non-blocking.\n\n## Modal Dialog\n\n<MaterialDesignDescription title={'Dialogs'} url={'https://material.io/components/dialogs/'} />\n\nThe modal dialog is your typical pop-up window that appears in the center of the screen in front of primary content. The primary use of dialogs is to present critical information to users or to ask for a decision. For example, you may wish to ask a user if they are sure they want to delete a file.\n\nModals are also great for presenting single tasks or workflows to a user. By using a modal, you allow the user to do more work without cluttering your main layout with unnecessary information (e.g., an Add User button could open a modal with a form to enter the new user's information). You can also use modals to edit large amounts of information that would be too difficult to fit into a sidebar.\n\nModal dialogs are always blocking — they must be dismissed before the user can interact with the rest of the application content. They may be dismissed by clicking on a close button or, for less critical dialogs, by clicking anywhere on the screen outside of it.\n\n## Sidebar\n\n<MaterialDesignDescription title={'Sheets: Side'} url={'https://material.io/components/sheets-side'} />\n\nSidebars (Side Sheets in the Material documentation) are used to present supplemental information to users. Most commonly, they display information about selected items in the main interface (e.g., selecting an item in a list would open a sidebar on the right with additional details about the selected item).\n\nThey can also present simple form data and inputs (such as radio buttons, checkbox, dropdown menus, etc.) for editing a selected item. This type of sidebar should be temporary such that the user can easily close it with a close button or clicking elsewhere on the screen.\n\nSidebars should always appear on the opposite side of the screen as the main [navigation](/patterns/navigation).\n\n> In general, modals should be used when creating new data, and sidebars should be used for viewing and editing existing data.\n\n## Bottom Sheet\n\n<MaterialDesignDescription title={'Sheets: Bottom'} url={'https://material.io/components/sheets-bottom/'} />\n\nBottom sheets are content surfaces that slide in from the bottom of the screen, primarily used in mobile applications. There are three types: standard, modal, and expandable. The content shown in a bottom sheet can be as simple as a list of items or as complex as a full screen layout.\n\n### Standard\n\nA standard bottom sheet is always visible and non-blocking, used most commonly for multitasking, such as displaying media player controls while browsing other content.\n\n### Modal\n\nModal bottom sheets are similar to modal dialogs that open from the bottom of the screen and block interaction with the rest of the application. These typically contain a list of options or actions and are usually activated via a action button in the [app bar](/patterns/appbar). This is the most common type of bottom sheet found in PX Blue applications.\n\n<DemoCard\n    repository={'bottomsheet'}\n    angular={\n        'https://stackblitz.com/github/pxblue/angular-design-patterns?file=src%2Fapp%2Fpages%2Foverlays%2Fbasic-bottom-sheet%2Fbasic-bottom-sheet.component.ts'\n    }\n    react={\n        'https://codesandbox.io/s/github/pxblue/react-design-patterns/tree/master?file=/src/pages/overlays/basic-bottom-sheet/index.tsx&initialpath=basic-bottom-sheet'\n    }\n    ionic\n    reactNative\n/>\n<DemoCard\n    repository={'complex-bottomsheet'}\n    angular={\n        'https://stackblitz.com/github/pxblue/angular-design-patterns?file=src%2Fapp%2Fpages%2Foverlays%2Fcomplex-bottom-sheet%2Fcomplex-bottom-sheet.component.ts'\n    }\n    react={\n        'https://codesandbox.io/s/github/pxblue/react-design-patterns/tree/master?file=/src/pages/overlays/complex-bottom-sheet/index.tsx&initialpath=complex-bottom-sheet'\n    }\n    ionic\n    reactNative\n/>\n\n### Expanding\n\nExpanding bottom sheets first appear in a smaller form factor, but can be expanded to take up more of the screen and display additional content.\n\n<Divider />\n\n# Design Specifications\n\nComing Soon!\n\n<Divider />\n\n# Developers\n\nUse the following components to implement this pattern:\n\n**Angular** and **Ionic**:\n\n-   Angular Material\n    -   [Dialog](https://material.angular.io/components/dialog/overview)\n    -   [Bottom Sheet](https://material.angular.io/components/bottom-sheet/overview)\n    -   [Sidenav](https://material.angular.io/components/sidenav/overview)\n\n**React**:\n\n-   Material UI\n    -   [Drawer](https://material-ui.com/components/drawers/)\n    -   [Dialog](https://material-ui.com/components/dialogs/)\n\n**React Native**:\n\n-   React Native Paper\n\n    -   [Dialog](https://callstack.github.io/react-native-paper/dialog.html)\n    -   [Modal](https://callstack.github.io/react-native-paper/modal.html)\n\n-   [React Native Modal](https://github.com/react-native-community/react-native-modal)\n"
    },
    "/patterns/layout": {
        "title": "Page Layout",
        "text": "import { ImageGrid, MaterialDesignDescription } from '../../app/components';\nimport PageLayoutImage from '../../app/assets/design-patterns/page-layout/page-layout.png';\n\n<!-- KEYWORDS: design pattern layout -->\n\n# Page Layout Patterns\n\n<ImageGrid images={[PageLayoutImage]} />\n\nThe layout is one of the most fundamental aspects of your application - it's how you place and position all of the different elements on your page. It's also one of the most important aspects when building your application to be responsive and usable on a variety of different devices and screen sizes.\n\n<MaterialDesignDescription title={'Layout'} url={'https://material.io/design/layout/understanding-layout.html'} />\n\n> **NOTE:** PX Blue does not support the use of Twitter Bootstrap for PX Blue applications. Bootstrap can cause conflicts with PX Blue components and themes and is an unnecessary addition next to the Material component libraries and frameworks supported by PX Blue. If you are accustomed to using Bootstrap for layout, you can read about the PX Blue alternative approach below.\n\n## Angular\n\nIf you are building an Angular application, we recommend you use [Angular Flex Layout](https://github.com/angular/flex-layout) to build your application. This is the default layout library for Angular applications and is built and supported by the Angular team. Some of the main benefits of this library are:\n\n-   Seamless integration with Angular and Angular Material\n-   Support on all major browsers\n-   Greater flexibility and control than a static grid system\n-   Responsive layout capability (e.g., show/hide elements, dynamically apply classes, etc. based on screen size)\n\nYou can see examples of how to do various layouts on the Angular Flex Layout website ([static](https://tburleson-layouts-demos.firebaseapp.com/#/docs), [responsive](https://tburleson-layouts-demos.firebaseapp.com/#/responsive)).\n\n## React\n\nMaterial-UI for React applications provides a built-in [layout](https://material-ui.com/layout/basics/) mechanism, based on CSS flexbox. It allows you to build layouts based on CSS Grids, standard flexbox CSS, or a combination. Some of the main benefits of this library are:\n\n-   Built-in Grid components, based on Material Design 12-column layout\n-   Custom flexbox rules for more control\n-   Responsive layout capability (e.g., show/hide elements, dynamic styling rules, etc. based on screen size)\n\nYou can see examples of how to do various Grid layouts on the [Material UI](https://material-ui.com/layout/grid/) website.\n"
    },
    "/patterns/steppers": {
        "title": "Steppers",
        "text": "import { DemoCard, ImageGrid } from '../../app/components';\nimport Init from '../../app/assets/design-patterns/dynamic-stepper/dynamic-stepper-init.png';\nimport Adding from '../../app/assets/design-patterns/dynamic-stepper/dynamic-stepper-adding.png';\nimport Added from '../../app/assets/design-patterns/dynamic-stepper/dynamic-stepper-added.png';\n\n<!-- KEYWORDS: design pattern stepper procedure wizard -->\n\n# Stepper / Wizard Patterns\n\nSteppers, sometimes referred to as wizards, are useful when you need users to progress through a linear flow. You may need to prevent users from going to later steps until they have entered the required information in earlier steps, but steppers can also be used simply to break up and organize content when it would be too overwhelming to have on a single page or form.\n\n## Basic Stepper\n\nA basic stepper simply shows the steps that are available and allows the user to navigate between them. The content that is displayed for each step can be customized to suit your needs. Steppers can appear horizontally or vertically (vertical usually makes more sense for smaller screens when there are more than a few steps). Both [Angular Material](https://material.angular.io/components/stepper/overview) and [Material UI](https://material-ui.com/demos/steppers/) show many examples of various stepper configurations.\n\n## Dynamic Stepper\n\n<ImageGrid images={[Init, Adding, Added]} />\n<DemoCard repository={'dynamic-stepper'} angular={'https://stackblitz.com/github/pxblue/angular-design-patterns?file=src%2Fapp%2Fpages%2Fdynamic-stepper%2Fdynamic-stepper.component.ts'} react={'https://codesandbox.io/s/github/pxblue/react-design-patterns/tree/master?file=/src/pages/dynamic-stepper/index.tsx&initialpath=dynamic-stepper'} />\n\nSometimes, you may need to add additional steps to a stepper dynamically. This can be useful if there is a step that needs to occur multiple times (e.g., a configuration step for a dynamic number of devices) or if the user is configuring a workflow of their own. The example below illustrates this effect.\n"
    },
    "/patterns/visualizations": {
        "title": "Visualizations",
        "text": "import { DemoCard, ImageGrid, MaterialDesignDescription } from '../../app/components';\n\nimport DataVizImage from '../../app/assets/design-patterns/data-visualization/data-visualization.png';\n\n<!-- KEYWORDS: design pattern visualization map chart highcharts chartjs mapbox -->\n\n# Visualizations\n\n<ImageGrid images={[DataVizImage]} />\n\nThere are many opportunities to visualize data in different applications. The most common visualizations used in PX Blue applications come in the form of charts/graphs and maps.\n\n<MaterialDesignDescription\n    title={'Data Visualization'}\n    url={'https://material.io/design/communication/data-visualization.html'}\n/>\n\n## Charts & Graphs (Highcharts & ChartJS)\n\nCurrently, PX Blue supports building charts and graphs using [Highcharts](http://www.highcharts.com) and [ChartJS](https://www.chartjs.org/), which are comprehensive libraries compatible with both Angular and React.\n\n> **NOTE:** the following examples merely serve to show how to bring the charting libraries into your application and adjust some of the common chart parameters. You will want to adjust these values to meet the design requirements of your application.\n\n### Highcharts\n\n<DemoCard\n    repository={'highcharts'}\n    angular={`https://stackblitz.com/github/pxblue/highcharts/tree/master/angular-demo`}\n    react={`https://codesandbox.io/s/github/pxblue/highcharts/tree/master/react-demo`}\n/>\n\nPX Blue utilities for Highcharts graphs (line, column, pie, donut) are available as an NPM package ([@pxblue/highcharts](https://www.npmjs.com/package/@pxblue/highcharts)).\nThis package includes helper functions to generate chart configurations using recommended PX Blue styles.\nThese utilities also enable you to quickly create placeholder charts using simulated data. For more information about using Highcharts, check out their documentation.\n\n> Highcharts has different [licensing](https://shop.highsoft.com/developer-license) requirements depending on the nature of your application - you will need to contact Highsoft directly to ensure that your product is properly licensed. You can also see the [Highcharts Pricing](https://shop.highsoft.com/)) page for pricing information.\n\n### ChartJS\n\n<DemoCard\n    repository={'chartjs'}\n    angular={`https://stackblitz.com/github/pxblue/chartjs/tree/master/angular-demo`}\n    react={`https://codesandbox.io/s/github/pxblue/chartjs/tree/master/react-demo`}\n/>\n\nChartJS is an open source alternative to HighCharts offering a scaled-down feature set that supports basic charting needs.\n\nPX Blue utilities for ChartJS graphs (line, column, pie, donut) are available as an NPM package ([@pxblue/chartjs](https://www.npmjs.com/package/@pxblue/chartjs)). For more information, check out the [ChartJS Documentation](https://www.chartjs.org/).\n\n## Mapping (Mapbox)\n\n<DemoCard\n    repository={'mapbox'}\n    angular={`https://stackblitz.com/github/pxblue/mapbox/tree/master/angular-demo`}\n    react={`https://codesandbox.io/s/github/pxblue/mapbox/tree/master/react-demo`}\n/>\n\nIf your application needs to show data on a geographical map, PX Blue supports the use of [Mapbox](https://www.mapbox.com/), a visually pleasing mapping solution that uses data from OpenStreetMap.\n\nMapbox can be used on Android and iOS or on the web with Angular and React. A PX Blue theme for styling these maps is available as an NPM package ([@pxblue/mapbox](https://www.npmjs.com/package/@pxblue/mapbox)).\n\n> Using Mapbox is subject to certain [terms](https://www.mapbox.com/pricing/). If you would like to use Mapbox in your applications, you will need to work with Mapbox to ensure your product is properly licensed.\n"
    },
    "/style/color": {
        "title": "Color Palette",
        "text": "import { ColorPalette, HeadlineWithToggle, MaterialDesignDescription, Divider } from '../../app/components';\nimport * as Colors from '@pxblue/colors';\nimport * as BrandingColors from '@pxblue/colors-branding';\nimport { Typography } from '@material-ui/core';\nimport { Bookmark } from '@material-ui/icons';\n\n<!-- KEYWORDS: design style color palette branding -->\n\n<HeadlineWithToggle />\n\nPX Blue offers a variety of different colors for use in your applications. Our color palettes utilize a weighted approach to give designers and developers a versatile set of colors for solving common color-related issues (e.g., accessibility).\n\n<MaterialDesignDescription\n    title={'The Color System'}\n    url={'https://material.io/design/color/'}\n    description={`Material's color principles. You should adhere to PX Blue's color theme unless you are creating your own components.`}\n/>\n\nOur color sets are divided into sections as outlined below. User Interface and Status colors are available in a single package ([@pxblue/colors](https://www.npmjs.com/package/@pxblue/colors)). Branding (Charts and Graphs) colors are available as an additional package ([@pxblue/colors-branding](https://www.npmjs.com/package/@pxblue/colors-branding)).\n\nIn most cases, you should stick to using the 500 color (<Bookmark style={{ verticalAlign: 'middle' }} />), which is the primary color for each palette. When using PX Blue themes, the most important elements of the UI will be stylized with these colors.\n\n<Divider />\n\n# User Interface Colors\n\nUser Interface colors are designed to be the main colors used in the application. Use them in elements such as app bars, toolbars, page backgrounds, buttons, text, etc. These colors may also be used in branding or marketing of products and services.\n\n### Blue\n\n<ColorPalette palette={Colors.blue} />\n\n### White\n\n<ColorPalette palette={Colors.white} />\n\n### Gray\n\n<ColorPalette palette={Colors.gray} />\n\n### Black\n\nAvoid the use of pure black (**#000000**) in a UI, except in instances where you have a Dark Mode display on an OLED screen.\n\n<ColorPalette palette={Colors.black} />\n\n### Dark Black\n\nThese colors are only for dark themes.\n\n<ColorPalette palette={Colors.darkBlack} />\n<Divider />\n\n# Status Colors\n\nStatus colors have a special meaning in the context of PX Blue applications. They are used to communicate information such as Alarms, Warnings, Successes, Running or Energized status, etc. These colors should **_never_** be used purely as marketing colors and **_never_** used without a clear purpose. Status colors should be used to reinforce a status or state throughout an interface. For example, an alarm row in a list may use a red colored bell icon, paired with red text and a red border stripe. When navigating to details for that alarm, the app bar may be colored red. This will solidify the association that red = alarm = bell and make it easier for a user to find alarms at a glance in an application.\n\n### Red\n\nRed is used to denote Alarms and Errors. Avoid using it for any other purpose.\n\n<ColorPalette palette={Colors.red} />\n\n### Orange\n\nOrange is used to denote warnings, loss of communication, and other types of alerts. Avoid using it for any states that do not require attention.\n\n<ColorPalette palette={Colors.orange} />\n\n### Gold\n\nGold can be used to give additional variety to your alerts in combination with Red and Orange.\n\n<ColorPalette palette={Colors.gold} />\n\n### Yellow\n\nYellow can be used to indicate tripped status for electrical devices, or low-level alerts.\n\n<ColorPalette palette={Colors.yellow} />\n\n### Green\n\nGreen can be used to indicate \"safety\", \"good\", \"success\", or other positive states.\n\n<ColorPalette palette={Colors.green} />\n\n### Light Blue\n\nLight Blue should not be confused with the UI Blue. This can be used to indicate a variety of statuses, including Maintenance Mode, device disabled, etc.\n\n<ColorPalette palette={Colors.lightBlue} />\n\n### Purple\n\nPurple is used to denote a device is disarmed. Avoid using it for any states that do not require attention.\n\n<ColorPalette palette={Colors.purple} />\n<Divider />\n\n# Branding Colors\n\nThis expanded version of the color palette contains colors to be used for marketing, product identity, visualization (non-status), etc. Power Xpert Blue uses these colors as the palette for charting and graphing.\n\n### Blue\n\n<ColorPalette palette={BrandingColors.blue} />\n\n### Teal\n\n<ColorPalette palette={BrandingColors.teal} />\n\n### Citron\n\n<ColorPalette palette={BrandingColors.citron} />\n\n### Pine\n\n<ColorPalette palette={BrandingColors.pine} />\n\n### Emerald\n\n<ColorPalette palette={BrandingColors.emerald} />\n\n### Wine\n\n<ColorPalette palette={BrandingColors.wine} />\n\n### Crimson\n\n<ColorPalette palette={BrandingColors.crimson} />\n\n### Sunset\n\n<ColorPalette palette={BrandingColors.sunset} />\n\n### Rust\n\n<ColorPalette palette={BrandingColors.rust} />\n\n### Navy\n\n<ColorPalette palette={BrandingColors.navy} />\n\n### Sky\n\n<ColorPalette palette={BrandingColors.sky} />\n\n### Sage\n\n<ColorPalette palette={BrandingColors.sage} />\n\n### Toad\n\n<ColorPalette palette={BrandingColors.toad} />\n\n### Butter\n\n<ColorPalette palette={BrandingColors.butter} />\n\n### Goldenrod\n\n<ColorPalette palette={BrandingColors.goldenrod} />\n\n### Trophy\n\n<ColorPalette palette={BrandingColors.trophy} />\n"
    },
    "/style/iconography": {
        "title": "Iconography",
        "text": "import { IconBrowser, ProgressIconCard, MaterialDesignDescription, Divider, RegularWidth } from '../../app/components';\n\n<!-- KEYWORDS: design style icons progress -->\n\n# Iconography guidelines\n\nPower Xpert Blue is built on top of the Google Material design system, which allows us to take advantage\nof their extensive icon library and icon grid. These icons are available automatically when you use one\nof our supported Material component frameworks. PX Blue also includes a number of supplemental icons\nspecific to PX Blue products.\n\nThese icons are available in a variety of formats - select an icon below to view its usage instructions.\n\n<RegularWidth>\n    <MaterialDesignDescription\n        title={'System icons'}\n        url={'https://material.io/design/iconography/system-icons.html#'}\n        description={`Material Design's guidelines on creating your own icons.`}\n    />\n    <MaterialDesignDescription\n        title={`Material's icon`}\n        url={'https://material.io/resources/icons/'}\n        description={'List of Material Design icons. They are also included in the table below.'}\n        style={{ marginRight: 0 }}\n    />\n</RegularWidth>\n<IconBrowser />\n\n## Progress icons\n\nPX Blue also offers a number of icons that can be used to show progress, health, or other\npercentage-based metrics. These can be dynamically adjusted programmatically (fill amount, color, size)\nbased on properties in your application. You can read more about using these components on\n[Github](https://github.com/pxblue/icons/tree/master/progress).\n\n<ProgressIconCard />\n<Divider />\n\n# Still can't find what you need?\n\nIf you decide that an icon is appropriate and there are no suitable options available, you can\n[Contact Us](/community/contactus) to request a new icon. Please include a brief description of what the intended use is, and if possible a\npicture of where it will live in the context of your application. The UX team will review your request\nand provide a recommendation within 48 hours as to whether a new icon should be created or if an\nexisting icon is available for you to use.\n\nIf you are looking for the PX Blue 1.0 symbols, please refer to our [Github](https://github.com/pxblue/icons/tree/master/symbols).\n\nIf you have your own design resources who are able to create icons, you can build these on your own,\nfollowing the [Material Icon Guidelines](https://material.io/design/iconography/system-icons.html)\nto maintain a common look and feel. If you do not have your own designers, we can work with you to build\nthe icon you need. We can either build the icon in house or recommend external resources that you can\nuse. Please note that going this route may take extra time, so try to get requests in as early as\npossible. If you are making your own icons, please consider contributing these back into the PX Blue\nicon library (subject to review).\n"
    },
    "/style/typography": {
        "title": "Typography",
        "text": "import { ImageGrid, MaterialDesignDescription } from '../../app/components';\nimport TypeScaleImg from '../../app/assets/typography/type-scale.png';\nimport LargerApplicationImg from '../../app/assets/typography/larger-application.png';\nimport ApplicationImg from '../../app/assets/typography/application.png';\nimport HeadlineOptionsImg from '../../app/assets/typography/headline-options.png';\nimport { Divider, Typography } from '@material-ui/core';\n\n<!-- KEYWORDS: design style typography text -->\n\n# Typography Guidelines\n\nPX Blue builds off of the Material Design system, so in general, you may refer to the typography guidelines presented at [Material.io](https://material.io/guidelines/style/typography.html#). Below, we cover some of the areas where PX Blue differs from Material Design.\n\n<MaterialDesignDescription\n    title={'The Type System'}\n    url={'https://material.io/guidelines/style/typography.html'}\n    description={`Material Design's typography guidelines.`}\n/>\n\nUnlike Material Design, the primary font for Power Xpert Blue is [Open Sans](https://fonts.google.com/specimen/Open+Sans?selection.family=Open+Sans) (licensed under [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0)). This version contains the complete 897 character set, which includes the standard ISO Latin 1, Latin CE, Greek and Cyrillic character sets. Open Sans was optimized for print, web, and mobile interfaces, and has excellent legibility characteristics in its letter forms.\n\n## Type Scale\n\nPX Blue provides a type scale that includes a range of styles to support the needs of your application. All styles and fonts are available in the design library. As PX Blue continues to grow, additional font patterns will be added.\n\n<React.Fragment>\n    <ImageGrid images={[TypeScaleImg]} style={{ marginTop: 32 }} regularWidth />\n    <Divider />\n</React.Fragment>\n\n# Customization\n\nDifferent products have different needs, and we do not expect these pre-defined styles will cover every potential use case. Slight customization of these styles, such as changing a font weight in a particular component, are acceptable and expected. In most cases, you should be able to adjust existing styles without having to define an entirely new style. If you find that you must create new styles (see below), they should still use the PX Blue font (Open Sans) and adhere to our color guidelines.\n\n<ImageGrid images={[LargerApplicationImg]} style={{ marginTop: 32 }} regularWidth />\n\n## When to create custom font styles\n\nNew font styles can be created when a design calls for additional font sizes or states that are currently not available in PX Blue. The most common cases for custom styles have been additional headline styles (in certain components) and the modification of Body 2 from semi-bold to regular. Ultimately, the need for custom styles depends on you and what's best for the product. PX Blue is available to provide recommendations and design reviews. If you need help defining a new style, do not hesitate to [contact us](/community/contactus)!\n\nThe examples below depict how the designs would look using standard PX Blue compared to how the design looks with new created font styles.\n\n<React.Fragment>\n    <ImageGrid\n        images={[ApplicationImg]}\n        style={{ marginTop: 48, marginBottom: 16 }}\n        regularWidth\n        caption={['1: Card layout using default PX Blue styles', '2: Card layout using custom created styles']}\n    />\n    <ImageGrid\n        images={[HeadlineOptionsImg]}\n        style={{ marginTop: 48, marginBottom: 16 }}\n        regularWidth\n        caption={[\n            '1: Two line headline using default PX Blue styles',\n            '2: Two line headline using custom created styles',\n        ]}\n    />\n</React.Fragment>\n"
    },
    "/style/themes": {
        "title": "Themes",
        "text": "import { ImageGrid, DemoCard, MaterialDesignDescription, Divider } from '../../app/components';\nimport { REGULAR_WIDTH_STYLE } from '../../app/shared';\nimport LightThemeImage from '../../app/assets/design-patterns/theme/theme-light.png';\nimport DarkThemeImage from '../../app/assets/design-patterns/theme/theme-dark.png';\n\n<!-- KEYWORDS: design style theme -->\n\n# Power Xpert Blue Themes\n\nOne of the key benefits of PX Blue is consistency of look & feel between different applications. This is achieved primarily through the use of PX Blue themes.\n\n<div style={REGULAR_WIDTH_STYLE}>\n    <MaterialDesignDescription\n        title={'Material Theming Overview'}\n        description={`Material Design's brief introduction to theming.`}\n        url={'https://material.io/design/material-theming/overview.html#'}\n    />\n    <MaterialDesignDescription\n        title={'Dark Theme'}\n        url={'https://material.io/design/color/dark-theme.html'}\n        description={`Material Design's dark theme guide.`}\n        style={{ marginRight: 0 }}\n    />\n</div>\n<Divider />\n\n# Available Themes\n\n<ImageGrid\n    images={[LightThemeImage, DarkThemeImage]}\n    caption={'PX Blue offers a light theme (default theme) and a dark theme (for low-light condition usage).'}\n/>\n\nAs of version 2.0.0, the PX Blue themes packages includes two distinct themes:\n\n-   **Blue** is the default theme for all PX Blue applications. It should be applied at the root level of your app. It provides a variety of shades of blue for use in buttons, toolbars, etc. The standard background color is a light gray.\n-   **Blue Dark** is complementary to the Blue theme. It is intended primarily for applications used in low-light conditions. The primary colors used in the Blue Dark theme are various shades of gray with blue accents. It can be used as a standalone theme or combined with the Blue (default) theme to provide contrast for areas such as detail sidebars.\n\n<div style={REGULAR_WIDTH_STYLE}>\n    <DemoCard\n        repository={'themes'}\n        angular={`https://stackblitz.com/github/pxblue/themes/tree/master/angular/demo`}\n        react={`https://codesandbox.io/s/github/pxblue/themes/tree/master/react/demos/theme`}\n    />\n</div>\n\n> **NOTE:** Combining multiple themes in your application is optional. You may stick to using a single theme (Blue) for your entire application and then apply one-off styling where necessary to achieve other effects. All of the PX Blue colors are available individually ([@pxblue/colors](https://www.npmjs.com/package/@pxblue/colors)) for use in your application.\n\n<Divider />\n\n# Technical Support\n\n## Theme Formats\n\n-   **Angular** themes are a collection of SCSS stylesheets that are imported into your application and applied through classes ('pxb-blue' or 'pxb-dark').\n\n-   **React** themes are JSON objects that are consumed by the theme mechanism for Material UI components (`<MuiThemeProvider>`). They also contain some specific rules defined in [JSS](https://material-ui.com/customization/css-in-js/).\n\n> **NOTE:** If you are using Ionic for hybrid application development, you can utilize the Angular themes and [Angular Material](https://material.angular.io/components/categories) component library. A future version of PX Blue will include more robust theming for React Native applications.\n\n## Usage\n\nFor detailed usage instructions for PX Blue themes, you can read the package instructions on [GitHub](https://github.com/pxblue/themes#px-blue-themes-for-eaton-applications) or our getting started guides for [Angular](/development/frameworks-web/angular) and [React](/development/frameworks-web/react). For additional information on how Material component libraries apply themes, see [Angular Material Theming](https://material.angular.io/guide/theming) or [Material UI Theming](https://material-ui.com/customization/themes/).\n"
    },
    "/community/license": {
        "title": "Licensing",
        "text": "<!-- KEYWORDS: license open source bsd -->\n\n# Open Source License\n\nPX Blue is open source and licensed under the [BSD-3-Clause](https://github.com/pxblue/themes/blob/master/LICENSE) license agreement. The text of this license can be found in any of our resource repositories on GitHub and NPM. You should include this license information in a comment block in any of your projects that make use of PX Blue assets (i.e., themes, colors, icons).\n\n## Why Open Source?\n\nMost modern software applications are not built in a vacuum - typically they make use of a variety of open source libraries. PX Blue applications are no exception. So to make the process of using PX Blue more consistent with other libraries and simplify the delivery mechanism, we have made our resources available in the same way.\n\nPublishing these resources publicly will also allow us to continuously deliver updates and improvements seamlessly to development teams.\n\nTo learn more about adding these resources into your projects, refer to the updated Framework Guides.\nIf you are interested in contributing to PX Blue, please check out our [Innersource](/community/innersourcing) overview.\n\n## Full License Text\n\n```\nBSD 3-Clause License\n\nCopyright (c) 2020 - present, Eaton\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and / or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n```\n"
    },
    "/community/innersourcing": {
        "title": "Innersourcing",
        "text": "import { Divider, ImageGrid, NewFeatureFormButton } from '../../app/components';\nimport FourStepsImg from '../../app/assets/pxblue-conformity.svg';\n\n<!-- KEYWORDS: sharing innersourcing contribute -->\n\n# Innersource into PX Blue\n\nOne of the primary goals of Power Xpert Blue is to eliminate the need for teams to duplicate effort. If you have built something using Power Xpert Blue that you think would benefit other development teams, we would love to hear from you. Please click the button below and fill out the form to submit your new ideas.\n\n<NewFeatureFormButton title={'Submit Your Idea'} />\n\nAlternatively, you may [send us an email](/community/contactus).\n\n## Submitting Code Directly\n\nDevelopers can also choose to add a feature by creating a pull request on our [GitHub](https://github.com/pxblue). Please check out our [Contribution Guidelines](https://github.com/pxblue/.github/blob/master/CONTRIBUTING.md) before you get started.\n\nWe build our code examples using GitHub and use several online tools for sharing them. These tools allow you to import GitHub repositories and make the code runnable and editable in an online IDE.\n\n-   For Angular, React, and Ionic projects we use [Code Sandbox](https://codesandbox.io).\n-   For React Native we use [Snack](https://snack.expo.io/). Snack requires that your project is built using the [Expo CLI](https://docs.expo.io/workflow/expo-cli/).\n\nIf you have not used these tools before, they're a great way to play with code and make sharing code snippets much easier. We recommend that you try them out when submitting code samples to speed up the process.\n\n## How We Innersource New Features\n\n<ImageGrid\n    images={[FourStepsImg]}\n    gridImageProps={{ sm: 8 }}\n    caption={'We take four steps to go through a newly proposed idea: evaluate, iterate, implement, and release.'}\n/>\n\nAfter we hear from you about an innersourcing opportunity, our first step is to evaluate the proposed idea. How common is this practice? How many Eaton applications use it? How many will use it in the future? Is this a low-hanging fruit or does it require significant effort? Once we reach a conclusion, we will get in touch with you about next steps.\n\nIf we move forward with the innersourcing effort, the next step is to perform a detailed audit (both design and development where appropriate) to evaluate conformity with PX Blue. We will evaluate your usage of colors, components, and layouts to ensure that the proposed idea aligns with our existing patterns and we will also evaluate the overall re-usability of what you have created. During this process, we may contact you from time to time to ask questions or discuss parts of your submission.\n\nIn most cases, submissions will require some amount of iteration or updates before they will be brought into the PX Blue design system. These updates can be performed by you or the PX Blue team depending on availability and timeframe. We will work with you to establish a plan for releasing the new materials and add it to one of our scheduled quarterly releases (see our [roadmap](/roadmap) for details). Depending on the nature of the materials, they will be added to our Figma library (designs), NPM packages, and/or design pattern code examples. Occasionally, code may be available for testing in the form of alpha or beta packages prior to its official release.\n\n<Divider />\n\n# Our Code\n\nAll of the code samples and documentation from this site can be found on [GitHub](https://github.com/pxblue). You can also check out the [Resources](/resources) page for links to the live demos for our examples.\n"
    },
    "/community/bugs": {
        "title": "Report Bugs",
        "text": "<!-- KEYWORDS: bugs -->\n\n# Encountering and Reporting Bugs\n\nOne of the primary reasons for using Google's [Material Design](https://material.io/) system is to take advantage of the large community of development resources attached to the project. This improves the response time for issues and cuts down on the number of bugs in the platforms. But nobody is perfect - if you run into an issue, please let us know.\n\n## If You Encounter a Bug w/ Power Xpert Blue\n\nIf you run into a bug with:\n\n-   Power Xpert Blue themes, components, or other NPM packages\n-   Power Xpert Blue code samples or\n-   the Power Xpert Blue documentation on this site\n\nyou can help us make the experience better for yourself and others by reporting a bug. Simply [Contact us](/community/contactus) with the following information:\n\n-   Summary: a brief, but clear description of the issue.\n-   Description: more detailed information about the issue including steps to reproduce.\n-   Environment: information about your machine (Operating System, Browser Version).\n\nYou can also report issues on the appropriate page on [GitHub](https://github.com/pxblue).\n\n## If You Encounter a Bug in Your Framework\n\nThe JavaScript libraries and their associated Material Design libraries are part of the open source community. If you find an issue with either of these, you can submit your tickets directly to those projects using the links below (or better yet, fork the repository and contribute!):\n\n### Angular\n\n-   [Angular](https://github.com/angular/angular/issues)\n-   [Angular Material](https://github.com/angular/material2/issues)\n\n### React\n\n-   [React](https://github.com/facebook/react/issues)\n-   [Material-UI](https://github.com/mui-org/material-ui/issues)\n\n### Ionic / Cordova\n\n-   [Ionic](https://github.com/ionic-team/ionic/issues)\n-   [Cordova](https://github.com/apache/cordova/issues)\n-   [Cordova CLI](https://github.com/apache/cordova-cli/issues)\n\n### React Native\n\n-   [React Native](https://github.com/facebook/react-native/issues)\n"
    },
    "/community/features": {
        "title": "Request Features",
        "text": "import { Divider, NewFeatureFormButton } from '../../app/components';\n\n<!-- KEYWORDS: request feature -->\n\n# New Features in PX Blue\n\nIf you'd like to see something added to PX Blue, such as new patterns, components, icons, code examples, theme updates, etc., please click below and fill out the form.\n\n<NewFeatureFormButton />\n\nAlternatively, you may [send us an email](/community/contactus). If you'd like to add a feature yourself, please read our section on [innersourcing](/community/innersourcing). Developers can also log an issue on [GitHub](https://github.com/pxblue).\n\n<Divider />\n\n# New Features in a Framework\n\nThe JavaScript libraries and their associated Material Design libraries are part of the open source community. If you want to see new features added, you can submit your requests directly to those projects using the links below (or better yet, fork the repository and contribute!):\n\n-   [Angular](https://github.com/angular/angular/issues)\n    -   [Angular Material](https://github.com/angular/material2/issues)\n-   [React](https://github.com/facebook/react/issues)\n    -   [Material-UI](https://github.com/mui-org/material-ui/issues)\n-   [Apache Cordova](https://github.com/apache/cordova/issues)\n-   [Ionic](https://github.com/ionic-team/ionic/issues)\n-   [React Native](https://github.com/facebook/react-native/issues)\n"
    },
    "/community/faq": {
        "title": "FAQ",
        "text": "<!-- KEYWORDS: faq question answers -->\n\n# Frequently Asked Questions\n\n### 1. How do I update to PX Blue 2.2+ if I'm currently using 2.1?\n\n1. First, delete the PX Blue 2.1 theme files from your project source tree.\n2. Next, install the new themes package from NPM:\n    - [Angular Themes](https://www.npmjs.com/package/@pxblue/angular-themes)\n    - [React Themes](https://www.npmjs.com/package/@pxblue/react-themes)\n    - [React Native Themes](https://www.npmjs.com/package/@pxblue/react-native-themes)\n3. Update your import statements to point to the npm package instead of the local file.\n4. You'll also need to add a line to reference the Open Sans font package (where to add the line varies by framework)\n\nDetailed instructions can be found in our updated Framework Guides.\n\n-   [Angular](/development/frameworks-web/angular)\n-   [React](/development/frameworks-web/react)\n\n### 2. Can I use Ionic with PX Blue?\n\nWith version 2.3.0, PX Blue introduced support for Ionic applications. While Ionic supports the use of a variety of frameworks for development, at this time PX Blue support is limited to Ionic 4+ applications built using Angular and Angular Material.\n\n### 3. Can I use Bootstrap with PX Blue?\n\nPX Blue does not support the use of Twitter Bootstrap for PX Blue applications. Bootstrap can cause conflicts with PX Blue components and themes and is an unnecessary addition next to the Material component libraries and frameworks supported by PX Blue. If you are accustomed to using Bootstrap for layout, you can read about the PX Blue alternative approach on our [Layout Patterns](/patterns/layout) page.\n\n### 4. Can I use other charting solutions (e.g., D3) with PX Blue?\n\nCurrently, PX Blue recommends using [Highcharts](http://www.highcharts.com) for your charting needs. If you prefer an open-source charting alternative, PX Blue also offers resources for working with [ChartJS](https://www.chartjs.org/). You can read more about this on our [Visualizations](/patterns/visualizations) page. You may use other charting solutions in your application if there is a genuine business need, but keep in mind that this may compromise the consistency and reusability of your solution when compared to other projects.\n\n### 5. Do you have Design Patterns for...?\n\nWe will be continuously updating the Design Patterns section of pxblue.github.io with new patterns and code samples as they are ready. We will prioritize patterns and examples based on interest expressed from development teams. If there is something you want to see, [Contact us](/community/contactus).\n\nIf you have built something that you would like to share, check out our information on [innersourcing](/community/innersourcing) and [Contact Us](/community/contactus) with a demo.\n"
    },
    "/community/contactus": {
        "title": "Contact Us",
        "text": "<!-- KEYWORDS: contact email feedback questions support help -->\r\n\r\n# Contact the PX Blue Team\r\n\r\nPX Blue is constantly evolving and adding new technical documentation, live code examples, components, and more. As the system grows, we welcome your feedback and suggestions on how we can make the system more useful for you and your team. Please do not hesitate to contact us regarding any issues you experience or potential opportunities for improvement.\r\n\r\n## How to Contact Us\r\n\r\nIf you have any questions or feedback about PX Blue or how to use it, you can email the team directly at <a href=\"mailto:pxblue@eaton.com\">pxblue@eaton.com</a>. We typically respond to all inquiries within one business day.\r\n\r\nWe look forward to hearing from you!\r\n"
    },
    "/resources": { "title": "Resources" },
    "/roadmap": { "title": "Roadmap" },
    "/release-notes": { "title": "Release Notes" }
}
